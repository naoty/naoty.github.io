{"version":3,"sources":["webpack:///path---posts-40-html-eefcc6d027398114f029.js","webpack:///./.cache/json/posts-40-html.json"],"names":["webpackJsonp","414","module","exports","data","site","siteMetadata","rootURL","markdownRemark","frontmatter","title","time","description","html","fileAbsolutePath","pathContext","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,QAAA,4BAAqCC,gBAAmBC,aAAeC,MAAA,0BAAAC,KAAA,2BAAAC,YAAA,iCAAkHC,KAAA,qvCAAytCC,iBAAA,yBAAqFC,aAAgBC,GAAA","file":"path---posts-40-html-eefcc6d027398114f029.js","sourcesContent":["webpackJsonp([99905549189457],{\n\n/***/ 414:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"Container Componentの作り方\",\"time\":\"2018-09-05T16:39:00+0900\",\"description\":\"Container Componentの実装の個人的なメモ\"},\"html\":\"<p>Reactに慣れてきたので、ComponentをContainer ComponentとPresentational Componentに分けるという実装パターンを試している。</p>\\n<p>Presentational ComponentはFunctional Componentで簡単に書けるけど、Container Componentの書き方がいまいち分かってなかったのでメモする。</p>\\n<pre><code>import React from \\\"react\\\";\\n\\nexport default class Container extends React.Component {\\n  render() {\\n    // 子コンポーネントに渡すprops\\n    const props = {};\\n\\n    // this.props.childrenは複数の可能性もあるので\\n    // React.cloneElement(this.props.children)はエラーになる。\\n    return React.Children.map(this.props.children, child => (\\n      // childはテキストの可能性もあるためtype checkする\\n      if (typeof child === \\\"object\\\") {\\n        return React.cloneElement(child, props);\\n      }\\n\\n      return child;\\n    ));\\n  }\\n}\\n</code></pre>\\n<p>このContainerでstateを管理し、子コンポーネントにprops経由で渡すようなイメージ。あとは、副作用を伴うアクションをContainerで定義しておいて、props経由で渡すこともありそう。</p>\\n<hr>\\n<h2>追記: 2018-09-06 12:30:00</h2>\\n<p>上のような汎用的なContainer Componentを作るならHOCを使う方がいいかもしれない。</p>\\n<pre><code>import React from \\\"react\\\";\\n\\nexport default (Component) => {\\n  // 引数のComponentをラップするComponentを返す\\n  return class extends React.Component {\\n    render() {\\n      // 自身に渡されたpropsとstateをラップしたComponentに渡す\\n      return &#x3C;Component {...this.state} {...this.props} />;\\n    }\\n  }\\n}\\n</code></pre>\\n<p>こっちの方がシンプルに書けそう。</p>\",\"fileAbsolutePath\":\"contents/posts/40.md\"}},\"pathContext\":{\"id\":\"contents/posts/40.md absPath of file >>> MarkdownRemark\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-40-html-eefcc6d027398114f029.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"Container Componentの作り方\",\"time\":\"2018-09-05T16:39:00+0900\",\"description\":\"Container Componentの実装の個人的なメモ\"},\"html\":\"<p>Reactに慣れてきたので、ComponentをContainer ComponentとPresentational Componentに分けるという実装パターンを試している。</p>\\n<p>Presentational ComponentはFunctional Componentで簡単に書けるけど、Container Componentの書き方がいまいち分かってなかったのでメモする。</p>\\n<pre><code>import React from \\\"react\\\";\\n\\nexport default class Container extends React.Component {\\n  render() {\\n    // 子コンポーネントに渡すprops\\n    const props = {};\\n\\n    // this.props.childrenは複数の可能性もあるので\\n    // React.cloneElement(this.props.children)はエラーになる。\\n    return React.Children.map(this.props.children, child => (\\n      // childはテキストの可能性もあるためtype checkする\\n      if (typeof child === \\\"object\\\") {\\n        return React.cloneElement(child, props);\\n      }\\n\\n      return child;\\n    ));\\n  }\\n}\\n</code></pre>\\n<p>このContainerでstateを管理し、子コンポーネントにprops経由で渡すようなイメージ。あとは、副作用を伴うアクションをContainerで定義しておいて、props経由で渡すこともありそう。</p>\\n<hr>\\n<h2>追記: 2018-09-06 12:30:00</h2>\\n<p>上のような汎用的なContainer Componentを作るならHOCを使う方がいいかもしれない。</p>\\n<pre><code>import React from \\\"react\\\";\\n\\nexport default (Component) => {\\n  // 引数のComponentをラップするComponentを返す\\n  return class extends React.Component {\\n    render() {\\n      // 自身に渡されたpropsとstateをラップしたComponentに渡す\\n      return &#x3C;Component {...this.state} {...this.props} />;\\n    }\\n  }\\n}\\n</code></pre>\\n<p>こっちの方がシンプルに書けそう。</p>\",\"fileAbsolutePath\":\"contents/posts/40.md\"}},\"pathContext\":{\"id\":\"contents/posts/40.md absPath of file >>> MarkdownRemark\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-40-html.json\n// module id = 414\n// module chunks = 99905549189457"],"sourceRoot":""}