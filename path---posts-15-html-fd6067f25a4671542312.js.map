{"version":3,"sources":["webpack:///path---posts-15-html-fd6067f25a4671542312.js","webpack:///./.cache/json/posts-15-html.json"],"names":["webpackJsonp","384","module","exports","data","site","siteMetadata","rootURL","markdownRemark","frontmatter","title","time","html","fileAbsolutePath","pathContext","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,QAAA,4BAAqCC,gBAAmBC,aAAeC,MAAA,eAAAC,KAAA,4BAAyDC,KAAA,8pBAAAC,iBAAA,yBAAitBC,aAAgBC,GAAA","file":"path---posts-15-html-fd6067f25a4671542312.js","sourcesContent":["webpackJsonp([141514096748982],{\n\n/***/ 384:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"PostCSSを導入した\",\"time\":\"2018-01-24T16:27:00+0900\"},\"html\":\"<p>このGitHub pagesのstylesheetは、これまでSASSで記述されGulpのパイプラインで処理されたCSSだった。今回、PostCSSを導入した。理由としては、PostCSSを通してマルチブラウザへの効率的な対応やCSSのlintを行いたかったからだ。</p>\\n<p>PostCSSの導入にともなって、SASSで記述していたstylesheetをcssnextで書き換えた。SASSのような独自記法を覚えるよりも標準的な規格を覚える方が学習コストを回収しやすい。ちょうどCoffeeScriptからECMAScript 6への移行と同じような感じだ。</p>\\n<p>導入したPostCSSプラグインは以下の通り。</p>\\n<ul>\\n<li><code>postcss-cssnext</code>：cssnextを導入する。これでcssで変数を利用したり、ネストした書き方ができる。<code>autoprefixer</code>が内部で使われており、サポートするブラウザに基づいてベンダープレフィックスを付与してくれる。</li>\\n<li><code>postcss-import</code>：<code>@import</code>で宣言した外部のファイルを1つのファイルにまとめることができる。</li>\\n<li><code>stylelint</code>：CSSのlintを行う。</li>\\n<li><code>cssnano</code>：CSSの圧縮を行う。</li>\\n</ul>\",\"fileAbsolutePath\":\"contents/posts/15.md\"}},\"pathContext\":{\"id\":\"contents/posts/15.md absPath of file >>> MarkdownRemark\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-15-html-fd6067f25a4671542312.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"PostCSSを導入した\",\"time\":\"2018-01-24T16:27:00+0900\"},\"html\":\"<p>このGitHub pagesのstylesheetは、これまでSASSで記述されGulpのパイプラインで処理されたCSSだった。今回、PostCSSを導入した。理由としては、PostCSSを通してマルチブラウザへの効率的な対応やCSSのlintを行いたかったからだ。</p>\\n<p>PostCSSの導入にともなって、SASSで記述していたstylesheetをcssnextで書き換えた。SASSのような独自記法を覚えるよりも標準的な規格を覚える方が学習コストを回収しやすい。ちょうどCoffeeScriptからECMAScript 6への移行と同じような感じだ。</p>\\n<p>導入したPostCSSプラグインは以下の通り。</p>\\n<ul>\\n<li><code>postcss-cssnext</code>：cssnextを導入する。これでcssで変数を利用したり、ネストした書き方ができる。<code>autoprefixer</code>が内部で使われており、サポートするブラウザに基づいてベンダープレフィックスを付与してくれる。</li>\\n<li><code>postcss-import</code>：<code>@import</code>で宣言した外部のファイルを1つのファイルにまとめることができる。</li>\\n<li><code>stylelint</code>：CSSのlintを行う。</li>\\n<li><code>cssnano</code>：CSSの圧縮を行う。</li>\\n</ul>\",\"fileAbsolutePath\":\"contents/posts/15.md\"}},\"pathContext\":{\"id\":\"contents/posts/15.md absPath of file >>> MarkdownRemark\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-15-html.json\n// module id = 384\n// module chunks = 141514096748982"],"sourceRoot":""}