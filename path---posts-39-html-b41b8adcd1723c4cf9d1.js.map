{"version":3,"sources":["webpack:///path---posts-39-html-b41b8adcd1723c4cf9d1.js","webpack:///./.cache/json/posts-39-html.json"],"names":["webpackJsonp","413","module","exports","data","site","siteMetadata","rootURL","markdownRemark","frontmatter","title","time","description","html","fileAbsolutePath","pathContext","id"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,QAAA,4BAAqCC,gBAAmBC,aAAeC,MAAA,sBAAAC,KAAA,2BAAAC,YAAA,kDAA+HC,KAAA,s2BAAAC,iBAAA,yBAA65BC,aAAgBC,GAAA","file":"path---posts-39-html-b41b8adcd1723c4cf9d1.js","sourcesContent":["webpackJsonp([13223130616096],{\n\n/***/ 413:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"ブログをGatsby.jsで書き直した\",\"time\":\"2018-09-01T11:54:00+0900\",\"description\":\"Gatsby.jsの感想やGatsby.jsに興味を持つきっかけとなったJAMstackの話\"},\"html\":\"<p>このブログを<a href=\\\"https://www.gatsbyjs.org\\\">Gatsby.js</a>で書き直した。昨年11月にこのブログを作ったときはgulpとejsを組み合わせて自作していたんだけど、Gatsby.jsの練習のために作り直すことにした。</p>\\n<h2>JAMstack</h2>\\n<p>Gatsby.jsの練習をすることにしたきっかけとしては、<a href=\\\"https://jamstack.org/\\\">JAMstack</a>という考え方を知り興味を持ったことだった。JAMstackを簡単に説明すると、Webアプリケーションを作るときの以下のような方針のことを指しているんだと理解している。</p>\\n<ul>\\n<li>サーバーサイドでHTMLをレンダリングしない。事前にHTMLをビルドして静的ファイルとしてCDNから配信する。</li>\\n<li>データの取得はすべてクライアントサイドから行う。</li>\\n</ul>\\n<p>どこまでこの考え方が有効なのか分からないけど、ポストRailsの時代を見据えたときに筋の良さを感じたので、実践してみようと思った。</p>\\n<p>JAMstackを実践するにあたって必要な静的サイトジェネレータの練習として、ブログをGatsby.jsで作ってみたということになる。</p>\\n<h2>Gatsby.jsの感想</h2>\\n<p>Reactは多少触っていたので、チュートリアルを一通りやればあとはすんなりブログの開発を進めることができた。WebpackとかBabelの面倒な設定は不要だったので、Reactの初心者でも扱えそうな気がした。</p>\\n<p>また、Gatsby.jsではHTMLのビルド時に必要なMarkdownで書いたコンテンツやサーバーにあるデータはすべてGraphQLで取得するようになっているため、GraphQLの雰囲気をつかむのにもよかった。GraphQLの仕様とかあんまりわかってなくても問題なかった。</p>\",\"fileAbsolutePath\":\"contents/posts/39.md\"}},\"pathContext\":{\"id\":\"contents/posts/39.md absPath of file >>> MarkdownRemark\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-39-html-b41b8adcd1723c4cf9d1.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"ブログをGatsby.jsで書き直した\",\"time\":\"2018-09-01T11:54:00+0900\",\"description\":\"Gatsby.jsの感想やGatsby.jsに興味を持つきっかけとなったJAMstackの話\"},\"html\":\"<p>このブログを<a href=\\\"https://www.gatsbyjs.org\\\">Gatsby.js</a>で書き直した。昨年11月にこのブログを作ったときはgulpとejsを組み合わせて自作していたんだけど、Gatsby.jsの練習のために作り直すことにした。</p>\\n<h2>JAMstack</h2>\\n<p>Gatsby.jsの練習をすることにしたきっかけとしては、<a href=\\\"https://jamstack.org/\\\">JAMstack</a>という考え方を知り興味を持ったことだった。JAMstackを簡単に説明すると、Webアプリケーションを作るときの以下のような方針のことを指しているんだと理解している。</p>\\n<ul>\\n<li>サーバーサイドでHTMLをレンダリングしない。事前にHTMLをビルドして静的ファイルとしてCDNから配信する。</li>\\n<li>データの取得はすべてクライアントサイドから行う。</li>\\n</ul>\\n<p>どこまでこの考え方が有効なのか分からないけど、ポストRailsの時代を見据えたときに筋の良さを感じたので、実践してみようと思った。</p>\\n<p>JAMstackを実践するにあたって必要な静的サイトジェネレータの練習として、ブログをGatsby.jsで作ってみたということになる。</p>\\n<h2>Gatsby.jsの感想</h2>\\n<p>Reactは多少触っていたので、チュートリアルを一通りやればあとはすんなりブログの開発を進めることができた。WebpackとかBabelの面倒な設定は不要だったので、Reactの初心者でも扱えそうな気がした。</p>\\n<p>また、Gatsby.jsではHTMLのビルド時に必要なMarkdownで書いたコンテンツやサーバーにあるデータはすべてGraphQLで取得するようになっているため、GraphQLの雰囲気をつかむのにもよかった。GraphQLの仕様とかあんまりわかってなくても問題なかった。</p>\",\"fileAbsolutePath\":\"contents/posts/39.md\"}},\"pathContext\":{\"id\":\"contents/posts/39.md absPath of file >>> MarkdownRemark\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-39-html.json\n// module id = 413\n// module chunks = 13223130616096"],"sourceRoot":""}