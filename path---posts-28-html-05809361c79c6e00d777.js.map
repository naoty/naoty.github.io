{"version":3,"sources":["webpack:///path---posts-28-html-05809361c79c6e00d777.js","webpack:///./.cache/json/posts-28-html.json"],"names":["webpackJsonp","400","module","exports","data","site","siteMetadata","rootURL","markdownRemark","frontmatter","title","time","description","html","fileAbsolutePath","pathContext","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,QAAA,4BAAqCC,gBAAmBC,aAAeC,MAAA,wBAAAC,KAAA,2BAAAC,YAAA,yCAAwHC,KAAA,qlCAAq0BC,iBAAA,yBAAyUC,aAAgBC,GAAA","file":"path---posts-28-html-05809361c79c6e00d777.js","sourcesContent":["webpackJsonp([110965885964820],{\n\n/***/ 400:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"awscliのwaitコマンドが便利だった\",\"time\":\"2018-04-22T09:55:00+0900\",\"description\":\"waitコマンドによってデプロイスクリプトが簡単に書けるようになった話です\"},\"html\":\"<p>ECSにデプロイするスクリプトを書くとき、<code>wait</code>コマンドがとても便利だった。</p>\\n<p>デプロイする前にいくつかのECSタスクを実行し完了を待ってからデプロイしたい場合、ECSタスクのステータスをポーリングして完了したかどうかを監視する必要がある。<code>aws ecs run-task</code>は即座に終了し、タスクの実行自体は非同期に行われるからだ。</p>\\n<p>そうしたとき、<code>wait</code>コマンドを使うと簡単にポーリングを行うことができる。</p>\\n<pre><code class=\\\"language-bash\\\">aws ecs wait tasks-stopped --tasks ${task_arn1} ${task_arn2}\\n</code></pre>\\n<p>これは<code>aws ecs describe-tasks</code>を定期的に実行してレスポンスからステータスを取得し、それが完了するまで待つ。<code>--tasks</code>オプションはECSタスクのARNを複数指定できるので、複数のタスクがすべて完了するのを待つことができる。</p>\\n<p>ECSタスクのARNは<code>aws ecs run-task</code>のレスポンスから取得できる。実際にはこんな感じで書くと思う。</p>\\n<pre><code class=\\\"language-bash\\\">task_arn1=$(aws ecs run-task \\\\\\n  --task-definition my-task-definition \\\\\\n  --query \\\"tasks[0].taskArn\\\" \\\\\\n  --output text)\\n\\naws ecs wait tasks-stopped --tasks ${task_arn1}\\n</code></pre>\\n<p>気をつける必要があるのは、ECSタスクが完了したかどうかは分かるものの、それが成功したのか失敗したのかは分からないということだ。なので、<code>wait</code>の後で<code>describe-tasks</code>によって失敗したかどうかをチェックする必要があるとおもう。</p>\\n<p><code>wait</code>コマンドはタスクの完了だけでなくサービスのステータスの監視でも使えるし、またECS以外にもEC2などで使えるのでawscliを使ったスクリプトを書くときには今後もお世話になりそう。</p>\",\"fileAbsolutePath\":\"contents/posts/28.md\"}},\"pathContext\":{\"id\":\"contents/posts/28.md absPath of file >>> MarkdownRemark\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-28-html-05809361c79c6e00d777.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"awscliのwaitコマンドが便利だった\",\"time\":\"2018-04-22T09:55:00+0900\",\"description\":\"waitコマンドによってデプロイスクリプトが簡単に書けるようになった話です\"},\"html\":\"<p>ECSにデプロイするスクリプトを書くとき、<code>wait</code>コマンドがとても便利だった。</p>\\n<p>デプロイする前にいくつかのECSタスクを実行し完了を待ってからデプロイしたい場合、ECSタスクのステータスをポーリングして完了したかどうかを監視する必要がある。<code>aws ecs run-task</code>は即座に終了し、タスクの実行自体は非同期に行われるからだ。</p>\\n<p>そうしたとき、<code>wait</code>コマンドを使うと簡単にポーリングを行うことができる。</p>\\n<pre><code class=\\\"language-bash\\\">aws ecs wait tasks-stopped --tasks ${task_arn1} ${task_arn2}\\n</code></pre>\\n<p>これは<code>aws ecs describe-tasks</code>を定期的に実行してレスポンスからステータスを取得し、それが完了するまで待つ。<code>--tasks</code>オプションはECSタスクのARNを複数指定できるので、複数のタスクがすべて完了するのを待つことができる。</p>\\n<p>ECSタスクのARNは<code>aws ecs run-task</code>のレスポンスから取得できる。実際にはこんな感じで書くと思う。</p>\\n<pre><code class=\\\"language-bash\\\">task_arn1=$(aws ecs run-task \\\\\\n  --task-definition my-task-definition \\\\\\n  --query \\\"tasks[0].taskArn\\\" \\\\\\n  --output text)\\n\\naws ecs wait tasks-stopped --tasks ${task_arn1}\\n</code></pre>\\n<p>気をつける必要があるのは、ECSタスクが完了したかどうかは分かるものの、それが成功したのか失敗したのかは分からないということだ。なので、<code>wait</code>の後で<code>describe-tasks</code>によって失敗したかどうかをチェックする必要があるとおもう。</p>\\n<p><code>wait</code>コマンドはタスクの完了だけでなくサービスのステータスの監視でも使えるし、またECS以外にもEC2などで使えるのでawscliを使ったスクリプトを書くときには今後もお世話になりそう。</p>\",\"fileAbsolutePath\":\"contents/posts/28.md\"}},\"pathContext\":{\"id\":\"contents/posts/28.md absPath of file >>> MarkdownRemark\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-28-html.json\n// module id = 400\n// module chunks = 110965885964820"],"sourceRoot":""}