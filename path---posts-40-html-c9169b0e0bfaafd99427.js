webpackJsonp([99905549189457],{414:function(n,t){n.exports={data:{site:{siteMetadata:{rootURL:"https://naoty.github.io"}},markdownRemark:{frontmatter:{title:"Container Componentの作り方",time:"2018-09-05T16:39:00+0900",description:"Container Componentの実装の個人的なメモ"},html:'<p>Reactに慣れてきたので、ComponentをContainer ComponentとPresentational Componentに分けるという実装パターンを試している。</p>\n<p>Presentational ComponentはFunctional Componentで簡単に書けるけど、Container Componentの書き方がいまいち分かってなかったのでメモする。</p>\n<pre><code>import React from "react";\n\nexport default class Container extends React.Component {\n  render() {\n    // 子コンポーネントに渡すprops\n    const props = {};\n\n    // this.props.childrenは複数の可能性もあるので\n    // React.cloneElement(this.props.children)はエラーになる。\n    return React.Children.map(this.props.children, child => (\n      // childはテキストの可能性もあるためtype checkする\n      if (typeof child === "object") {\n        return React.cloneElement(child, props);\n      }\n\n      return child;\n    ));\n  }\n}\n</code></pre>\n<p>このContainerでstateを管理し、子コンポーネントにprops経由で渡すようなイメージ。あとは、副作用を伴うアクションをContainerで定義しておいて、props経由で渡すこともありそう。</p>',fileAbsolutePath:"contents/posts/40.md"}},pathContext:{id:"contents/posts/40.md absPath of file >>> MarkdownRemark"}}}});
//# sourceMappingURL=path---posts-40-html-c9169b0e0bfaafd99427.js.map