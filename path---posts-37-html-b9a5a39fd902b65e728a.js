webpackJsonp([95101417656822],{410:function(e,t){e.exports={data:{site:{siteMetadata:{rootURL:"https://naoty.github.io"}},markdownRemark:{frontmatter:{title:"HTMLテンプレートをpackrでバイナリに埋め込む",time:"2018-07-29T17:55:00+0900",description:null},html:'<p>最近、GoでWebアプリケーションを書く練習をしている。フレームワークとしてEchoを使っている。</p>\n<p>アセットをバイナリに埋め込むときいくつか選択肢があったけど、HTMLテンプレートのパースを実装しやすそうな<a href="https://github.com/gobuffalo/packr">packr</a>を使ってみている。</p>\n<p>以下のようなテンプレートを用意する。</p>\n<pre><code>{{/* assets/views/layout.html */}}\n{{define "layout" -}}\n&#x3C;!DOCTYPE html>\n&#x3C;html lang="ja">\n  &#x3C;head>\n    &#x3C;meta charset="UTF-8">\n    &#x3C;title>Task&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    {{template "content" . -}}\n  &#x3C;/body>\n&#x3C;/html>\n{{end}}\n</code></pre>\n<pre><code>{{/* assets/views/index.html */}}\n{{define "index" -}}\n&#x3C;p>Here is content!&#x3C;/p>\n{{end}}\n</code></pre>\n<p>これらのテンプレートは以下のコマンドでバイナリに埋め込むことができる。</p>\n<pre><code>$ packr build\n</code></pre>\n<p>次に、EchoでHTMLをレンダリングするためのRendererを実装する。</p>\n<pre><code>// renderer/renderer.go\n\n// Renderer is html/template renderer for Echo.\ntype Renderer struct {\n    templates *template.Template\n}\n\n// New parses templates in box and return a new Renderer.\nfunc New(box packr.Box) *Renderer {\n    templates := template.New("templates")\n\n    for _, name := range box.List() {\n        text := box.String(name)\n        templates = template.Must(templates.Parse(text))\n    }\n\n    return &#x26;Renderer{templates: templates}\n}\n\n// Render renders HTML generated by template.\nfunc (r *Renderer) Render(wr io.Writer, name string, data interface{}, c echo.Context) error {\n    layout := template.Must(r.templates.Lookup("layout").Clone())\n    content := template.Must(r.templates.Lookup(name).Clone())\n    html := template.Must(layout.AddParseTree("content", content.Tree))\n\n    return html.ExecuteTemplate(wr, "layout", data)\n}\n</code></pre>\n<p><code>packr</code>コマンドでバイナリに埋め込んだアセットは<code>box.String(filename)</code>のように取得できる。これを使ってテンプレートをパースしていく。</p>\n<p>Rendererを初期化するときにテンプレートをすべてパースしておいて、レンダリング時にネストしたテンプレートを組み立てて<code>Execute</code>するようにしている。</p>\n<p>最後に、このRendererを初期化してEchoに設定する。</p>\n<pre><code>// main.go\n\ne := echo.New()\n\nviewsBox := packr.NewBox("./assets/views")\ne.Renderer = renderer.New(viewsBox)\n</code></pre>',fileAbsolutePath:"contents/posts/37.md"}},pathContext:{id:"contents/posts/37.md absPath of file >>> MarkdownRemark"}}}});
//# sourceMappingURL=path---posts-37-html-b9a5a39fd902b65e728a.js.map