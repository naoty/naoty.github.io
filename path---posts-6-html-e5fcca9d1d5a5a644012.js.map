{"version":3,"sources":["webpack:///path---posts-6-html-e5fcca9d1d5a5a644012.js","webpack:///./.cache/json/posts-6-html.json"],"names":["webpackJsonp","416","module","exports","data","site","siteMetadata","rootURL","markdownRemark","frontmatter","title","time","description","html","fileAbsolutePath","pathContext","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,QAAA,4BAAqCC,gBAAmBC,aAAeC,MAAA,6BAAAC,KAAA,2BAAAC,YAAA,2BAA+GC,KAAA,s6BAAgvBC,iBAAA,wBAA4OC,aAAgBC,GAAA","file":"path---posts-6-html-e5fcca9d1d5a5a644012.js","sourcesContent":["webpackJsonp([209096239685757],{\n\n/***/ 416:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"ActiveRecordのattributeメソッド\",\"time\":\"2017-12-08T23:00:00+0900\",\"description\":\"ActiveRecordのattributeは\"},\"html\":\"<pre><code class=\\\"language-rb\\\">class User\\n  attribute :unencrypted_password, :string\\nend\\n</code></pre>\\n<ul>\\n<li><code>attribute</code>メソッドはモデルに属性を追加する。</li>\\n<li>DBのカラムがなくても追加できる。</li>\\n<li>DBのカラムのアクセサをoverrideすることもできる。</li>\\n</ul>\\n<h1>例：パスワードのvalidation</h1>\\n<p>パスワードのvalidationを実装する場合を考える。パスワードのvalidationというのは、暗号化される前の値に対して行われる。生パスワードはDBに保存しないが、アクセサがあると便利なので<code>attribute</code>メソッドで追加する。<code>attribute</code>メソッドで追加した仮想的なカラムにはvalidationが使える。</p>\\n<pre><code class=\\\"language-rb\\\">class User\\n  attribute :unencrypted_password, :string\\n\\n  before_save :encrypt_password, if: unencrypted_password_changed?\\n\\n  validates :unencrypted_password,\\n    format: { with: /\\\\A[0-9a-zA-Z]\\\\z/ },\\n    length: { minimum: 8, maximum: 36 },\\n    presence: true\\n\\n  private\\n\\n  def encrypt_password\\n    cost = BCrypt::Engine.cost\\n    self.password = BCrypt::Password.create(unencrypted_password, cost)\\n  end\\nend\\n</code></pre>\",\"fileAbsolutePath\":\"contents/posts/6.md\"}},\"pathContext\":{\"id\":\"contents/posts/6.md absPath of file >>> MarkdownRemark\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-6-html-e5fcca9d1d5a5a644012.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"ActiveRecordのattributeメソッド\",\"time\":\"2017-12-08T23:00:00+0900\",\"description\":\"ActiveRecordのattributeは\"},\"html\":\"<pre><code class=\\\"language-rb\\\">class User\\n  attribute :unencrypted_password, :string\\nend\\n</code></pre>\\n<ul>\\n<li><code>attribute</code>メソッドはモデルに属性を追加する。</li>\\n<li>DBのカラムがなくても追加できる。</li>\\n<li>DBのカラムのアクセサをoverrideすることもできる。</li>\\n</ul>\\n<h1>例：パスワードのvalidation</h1>\\n<p>パスワードのvalidationを実装する場合を考える。パスワードのvalidationというのは、暗号化される前の値に対して行われる。生パスワードはDBに保存しないが、アクセサがあると便利なので<code>attribute</code>メソッドで追加する。<code>attribute</code>メソッドで追加した仮想的なカラムにはvalidationが使える。</p>\\n<pre><code class=\\\"language-rb\\\">class User\\n  attribute :unencrypted_password, :string\\n\\n  before_save :encrypt_password, if: unencrypted_password_changed?\\n\\n  validates :unencrypted_password,\\n    format: { with: /\\\\A[0-9a-zA-Z]\\\\z/ },\\n    length: { minimum: 8, maximum: 36 },\\n    presence: true\\n\\n  private\\n\\n  def encrypt_password\\n    cost = BCrypt::Engine.cost\\n    self.password = BCrypt::Password.create(unencrypted_password, cost)\\n  end\\nend\\n</code></pre>\",\"fileAbsolutePath\":\"contents/posts/6.md\"}},\"pathContext\":{\"id\":\"contents/posts/6.md absPath of file >>> MarkdownRemark\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-6-html.json\n// module id = 416\n// module chunks = 209096239685757"],"sourceRoot":""}