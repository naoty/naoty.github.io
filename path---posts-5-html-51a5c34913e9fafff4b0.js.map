{"version":3,"sources":["webpack:///path---posts-5-html-51a5c34913e9fafff4b0.js","webpack:///./.cache/json/posts-5-html.json"],"names":["webpackJsonp","415","module","exports","data","site","siteMetadata","rootURL","markdownRemark","frontmatter","title","time","description","html","fileAbsolutePath","pathContext","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,QAAA,4BAAqCC,gBAAmBC,aAAeC,MAAA,2BAAAC,KAAA,2BAAAC,YAAA,4CAA8HC,KAAA,48DAA+6DC,iBAAA,wBAAiGC,aAAgBC,GAAA","file":"path---posts-5-html-51a5c34913e9fafff4b0.js","sourcesContent":["webpackJsonp([21988994693227],{\n\n/***/ 415:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"GitHub Pagesの更新をCIで自動化した\",\"time\":\"2017-12-08T00:04:00+0900\",\"description\":\"GitHub Pagesのための更新作業を手作業からCircleCIに変更した。\"},\"html\":\"<p>GitHub Pagesの管理が煩雑だったため、Circle CIで自動化した。</p>\\n<p>これまでは<a href=\\\"https://github.com/naoty/naoty.github.io\\\">GitHub Pagesのリポジトリ</a>を<a href=\\\"https://github.com/naoty/homepage\\\">管理リポジトリ</a>のサブモジュールとして管理していたが、サブモジュールはいろいろと作業が面倒だった。サブモジュールと本体の両方をgitでコミットするのがとにかく面倒だった。</p>\\n<p>最近、仕事でCircle CI 2.0の対応をしているため、このブログの更新もCIに任せることができそうだと思い、さっそく設定をした。以下、ハマったところとか工夫したところとか。</p>\\n<ul>\\n<li>GitHub pagesのリポジトリをcloneする必要があったが、その際にSSH接続で<code>Are you sure you want to continue connecting (yes/no)?</code>と聞かれてしまい、ビルドが止まってしまった。そこで、以下のようにすることで回避した。</li>\\n</ul>\\n<pre><code class=\\\"language-yaml\\\">- run:\\n    name: SSH settings\\n    command: mkdir ~/.ssh/ &#x26;&#x26; echo -e \\\"Host github.com\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\" > ~/.ssh/config\\n</code></pre>\\n<ul>\\n<li>Circle CIで他のリポジトリにアクセスするには鍵を追加する必要があるため、設定画面から鍵を追加した。</li>\\n<li>Circle CI上でgit commitする際に<code>username/repo@commit_id</code>の記法をメッセージに追加することで、GitHub pagesのコミットメッセージから対応する管理リポジトリのコミットに辿れるようにした。</li>\\n</ul>\\n<p>config.ymlは今のところ以下のようになっている。<code>npm install</code>でキャッシュを使っていないけど、そこらへんは徐々に最適化していきたい。</p>\\n<pre><code class=\\\"language-yaml\\\">version: 2\\njobs:\\n  build:\\n    docker:\\n      - image: circleci/node\\n    steps:\\n      - run:\\n          name: SSH settings\\n          command: mkdir ~/.ssh/ &#x26;&#x26; echo -e \\\"Host github.com\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\" > ~/.ssh/config\\n      - run:\\n          name: Clone GitHub pages\\n          command: |\\n            git clone git@github.com:naoty/naoty.github.io.git .\\n            git config user.email \\\"naoty.k@gmail.com\\\"\\n            git config user.name \\\"Naoto Kaneko\\\"\\n          working_directory: ~/naoty.github.io\\n      - checkout\\n      - run: npm install\\n      - run: npm run build\\n      - run:\\n          name: Publish GitHub pages\\n          command: |\\n            cp -pr public/* ~/naoty.github.io/\\n            cd ~/naoty.github.io\\n            git add .\\n            git commit -m \\\"Publish naoty/homepage@${CIRCLE_SHA1}\\\"\\n            git push origin master\\n</code></pre>\",\"fileAbsolutePath\":\"contents/posts/5.md\"}},\"pathContext\":{\"id\":\"contents/posts/5.md absPath of file >>> MarkdownRemark\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-5-html-51a5c34913e9fafff4b0.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"GitHub Pagesの更新をCIで自動化した\",\"time\":\"2017-12-08T00:04:00+0900\",\"description\":\"GitHub Pagesのための更新作業を手作業からCircleCIに変更した。\"},\"html\":\"<p>GitHub Pagesの管理が煩雑だったため、Circle CIで自動化した。</p>\\n<p>これまでは<a href=\\\"https://github.com/naoty/naoty.github.io\\\">GitHub Pagesのリポジトリ</a>を<a href=\\\"https://github.com/naoty/homepage\\\">管理リポジトリ</a>のサブモジュールとして管理していたが、サブモジュールはいろいろと作業が面倒だった。サブモジュールと本体の両方をgitでコミットするのがとにかく面倒だった。</p>\\n<p>最近、仕事でCircle CI 2.0の対応をしているため、このブログの更新もCIに任せることができそうだと思い、さっそく設定をした。以下、ハマったところとか工夫したところとか。</p>\\n<ul>\\n<li>GitHub pagesのリポジトリをcloneする必要があったが、その際にSSH接続で<code>Are you sure you want to continue connecting (yes/no)?</code>と聞かれてしまい、ビルドが止まってしまった。そこで、以下のようにすることで回避した。</li>\\n</ul>\\n<pre><code class=\\\"language-yaml\\\">- run:\\n    name: SSH settings\\n    command: mkdir ~/.ssh/ &#x26;&#x26; echo -e \\\"Host github.com\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\" > ~/.ssh/config\\n</code></pre>\\n<ul>\\n<li>Circle CIで他のリポジトリにアクセスするには鍵を追加する必要があるため、設定画面から鍵を追加した。</li>\\n<li>Circle CI上でgit commitする際に<code>username/repo@commit_id</code>の記法をメッセージに追加することで、GitHub pagesのコミットメッセージから対応する管理リポジトリのコミットに辿れるようにした。</li>\\n</ul>\\n<p>config.ymlは今のところ以下のようになっている。<code>npm install</code>でキャッシュを使っていないけど、そこらへんは徐々に最適化していきたい。</p>\\n<pre><code class=\\\"language-yaml\\\">version: 2\\njobs:\\n  build:\\n    docker:\\n      - image: circleci/node\\n    steps:\\n      - run:\\n          name: SSH settings\\n          command: mkdir ~/.ssh/ &#x26;&#x26; echo -e \\\"Host github.com\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\" > ~/.ssh/config\\n      - run:\\n          name: Clone GitHub pages\\n          command: |\\n            git clone git@github.com:naoty/naoty.github.io.git .\\n            git config user.email \\\"naoty.k@gmail.com\\\"\\n            git config user.name \\\"Naoto Kaneko\\\"\\n          working_directory: ~/naoty.github.io\\n      - checkout\\n      - run: npm install\\n      - run: npm run build\\n      - run:\\n          name: Publish GitHub pages\\n          command: |\\n            cp -pr public/* ~/naoty.github.io/\\n            cd ~/naoty.github.io\\n            git add .\\n            git commit -m \\\"Publish naoty/homepage@${CIRCLE_SHA1}\\\"\\n            git push origin master\\n</code></pre>\",\"fileAbsolutePath\":\"contents/posts/5.md\"}},\"pathContext\":{\"id\":\"contents/posts/5.md absPath of file >>> MarkdownRemark\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-5-html.json\n// module id = 415\n// module chunks = 21988994693227"],"sourceRoot":""}