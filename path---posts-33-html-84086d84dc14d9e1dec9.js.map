{"version":3,"sources":["webpack:///path---posts-33-html-84086d84dc14d9e1dec9.js","webpack:///./.cache/json/posts-33-html.json"],"names":["webpackJsonp","404","module","exports","data","site","siteMetadata","rootURL","markdownRemark","frontmatter","title","time","html","fileAbsolutePath","pathContext","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,QAAA,4BAAqCC,gBAAmBC,aAAeC,MAAA,qBAAAC,KAAA,4BAA+DC,KAAA,osCAAglBC,iBAAA,yBAAuqBC,aAAgBC,GAAA","file":"path---posts-33-html-84086d84dc14d9e1dec9.js","sourcesContent":["webpackJsonp([215322807585810],{\n\n/***/ 404:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"パラメータストアで環境変数を管理する\",\"time\":\"2018-06-08T21:57:00+0900\"},\"html\":\"<p>最近、ECSで運用しているRailsアプリの起動時にパラメータストアから環境変数を取得して設定するようにした。</p>\\n<h2>背景</h2>\\n<p>それまでは環境変数はコンテナ定義に指定されていたが、それをパラメータストアを使った方法に移行した。理由としては、機密情報をコンテナ定義の環境変数に設定するのは推奨されていないからだ。</p>\\n<p>また、開発環境で利用する環境変数が開発者によってバラバラに管理されていた（ローカルの<code>.env</code>ファイルによって管理されていた）ため、新しく開発に参加する際に正しい環境変数が何なのか把握するのが大変だった。</p>\\n<h2>パラメータストア</h2>\\n<p>パラメータストアとは、AWSが提供する階層型ストレージのことで、設定のような軽いデータを安全に管理できる。KMSによる暗号化も可能なので機密情報を含む環境変数の管理に向いていそうだと判断した。</p>\\n<h2>環境変数をパラメータストアに移す</h2>\\n<p>バラバラに管理されていた環境変数をパラメータストアに移した。パラメータストアは階層構造になっており、ある階層下にある値をまとめて取得することができる。</p>\\n<p>今回は<code>/&#x3C;アプリケーション名>/&#x3C;実行環境>/&#x3C;環境変数名></code>という階層で環境変数を管理することにした。例えば、<code>/myapp/production/PASSWORD</code>のような感じだ。</p>\\n<h2>コンテナからパラメータストアにアクセスする</h2>\\n<p>ECSコンテナからパラメータストアにアクセスするには権限が必要になる。パラメータストアへの移行と同時並行でECSコンテナでIAMロールを使うように修正していたので、このIAMロールにパラメータストアにアクセスするためのポリシーを付与した。</p>\\n<h2>Rails起動時に環境変数をセットする</h2>\\n<p>環境変数はRailsの起動プロセスの中で参照されることがある（データベースとの接続など）ため、起動プロセスの初期に環境変数を設定する必要がある。</p>\\n<p>いくつかRubygemがあるようだったが、たいした実装ではないので簡単なコードを書いて環境変数を起動プロセスの初期に設定するようにした。</p>\\n<p>注意点としては、パラメータストアから取得した環境変数よりも既存の環境変数を優先させた点だ。ECSからタスクとしてコンテナを起動するときなど、コンテナ定義から環境変数を指定することでパラメータストアの環境変数を上書きできると便利なケースがあったからだ。また、開発環境では<code>docker-compose.yml</code>で指定した環境変数を優先することも可能になる。</p>\",\"fileAbsolutePath\":\"contents/posts/33.md\"}},\"pathContext\":{\"id\":\"contents/posts/33.md absPath of file >>> MarkdownRemark\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-33-html-84086d84dc14d9e1dec9.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"パラメータストアで環境変数を管理する\",\"time\":\"2018-06-08T21:57:00+0900\"},\"html\":\"<p>最近、ECSで運用しているRailsアプリの起動時にパラメータストアから環境変数を取得して設定するようにした。</p>\\n<h2>背景</h2>\\n<p>それまでは環境変数はコンテナ定義に指定されていたが、それをパラメータストアを使った方法に移行した。理由としては、機密情報をコンテナ定義の環境変数に設定するのは推奨されていないからだ。</p>\\n<p>また、開発環境で利用する環境変数が開発者によってバラバラに管理されていた（ローカルの<code>.env</code>ファイルによって管理されていた）ため、新しく開発に参加する際に正しい環境変数が何なのか把握するのが大変だった。</p>\\n<h2>パラメータストア</h2>\\n<p>パラメータストアとは、AWSが提供する階層型ストレージのことで、設定のような軽いデータを安全に管理できる。KMSによる暗号化も可能なので機密情報を含む環境変数の管理に向いていそうだと判断した。</p>\\n<h2>環境変数をパラメータストアに移す</h2>\\n<p>バラバラに管理されていた環境変数をパラメータストアに移した。パラメータストアは階層構造になっており、ある階層下にある値をまとめて取得することができる。</p>\\n<p>今回は<code>/&#x3C;アプリケーション名>/&#x3C;実行環境>/&#x3C;環境変数名></code>という階層で環境変数を管理することにした。例えば、<code>/myapp/production/PASSWORD</code>のような感じだ。</p>\\n<h2>コンテナからパラメータストアにアクセスする</h2>\\n<p>ECSコンテナからパラメータストアにアクセスするには権限が必要になる。パラメータストアへの移行と同時並行でECSコンテナでIAMロールを使うように修正していたので、このIAMロールにパラメータストアにアクセスするためのポリシーを付与した。</p>\\n<h2>Rails起動時に環境変数をセットする</h2>\\n<p>環境変数はRailsの起動プロセスの中で参照されることがある（データベースとの接続など）ため、起動プロセスの初期に環境変数を設定する必要がある。</p>\\n<p>いくつかRubygemがあるようだったが、たいした実装ではないので簡単なコードを書いて環境変数を起動プロセスの初期に設定するようにした。</p>\\n<p>注意点としては、パラメータストアから取得した環境変数よりも既存の環境変数を優先させた点だ。ECSからタスクとしてコンテナを起動するときなど、コンテナ定義から環境変数を指定することでパラメータストアの環境変数を上書きできると便利なケースがあったからだ。また、開発環境では<code>docker-compose.yml</code>で指定した環境変数を優先することも可能になる。</p>\",\"fileAbsolutePath\":\"contents/posts/33.md\"}},\"pathContext\":{\"id\":\"contents/posts/33.md absPath of file >>> MarkdownRemark\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-33-html.json\n// module id = 404\n// module chunks = 215322807585810"],"sourceRoot":""}