{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/36.html","webpackCompilationHash":"7611f57c1c47d2c37259","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"決定境界のプロット","time":"2018-07-22T15:02:00+0900","description":"numpyやmatplotlibを使って決定境界をプロットする方法を学んだ","tags":["python","ml"]},"html":"<p>ロジスティック回帰など分類を行うアルゴリズムがちゃんとトレーニングデータを分類できているか確認するため、決定境界をプロットする方法を学んだ。そのメモをブログに残す。</p>\n<h2>まとめ</h2>\n<ul>\n<li><code class=\"language-text\">np.meshgrid()</code>で格子点を取得する。しかも、<code class=\"language-text\">np.arange()</code>などを使ってできるだけ細かく格子点を取得する。</li>\n<li>格子点を分類器に適用するため、トレーニングデータの形状に変換する。</li>\n<li>格子点に対して分類を予測する。</li>\n<li>格子点とその分類の予測を<code class=\"language-text\">plt.contourf()</code>を使って等高線としてプロットする。</li>\n</ul>\n<h2>格子点の取得</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\nx2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\nX1<span class=\"token punctuation\">,</span> X2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>meshgrid<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>X1<span class=\"token punctuation\">,</span> X2<span class=\"token punctuation\">,</span> <span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlimit<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylimit<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/images/posts/36/meshgrid.png\" alt=\"meshgrid\"></p>\n<p>上のように<code class=\"language-text\">np.meshgrid()</code>を使うと、2つの配列<code class=\"language-text\">x1</code>と<code class=\"language-text\">x2</code>からなる平面上にある格子点を取得できる。</p>\n<p>この格子点の間隔を小さくすると、<code class=\"language-text\">x1</code>と<code class=\"language-text\">x2</code>からなる平面上の「すべての点」を擬似的に再現できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span>\nx2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 以下同じ</span></code></pre></div>\n<p><img src=\"/images/posts/36/dense_meshgrid.png\" alt=\"dense meshgrid\"></p>\n<h2>格子点の変換</h2>\n<p>ある平面上の「すべての点」を分類器に適用すると、平面上に分類した結果をマッピングできるようになる。</p>\n<p>そのために格子点をトレーニングデータの形状に変換する。つまり、$(x<em>1, x</em>2)$のようにする。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># flatにする</span>\nX1_flatten <span class=\"token operator\">=</span> X1<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nX2_flatten <span class=\"token operator\">=</span> X2<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 結合して行列にする</span>\nX <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>X1_flatten<span class=\"token punctuation\">,</span> X2_flatten<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 行方向がトレーニングデータ、列方向がフィーチャーになるように転置する</span>\nX <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>T</code></pre></div>\n<h2>格子点を分類器に適用する</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Z <span class=\"token operator\">=</span> classifier<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上で分類器に適用できるように変換できたので、あとは予測する。</p>\n<h2>等高線図でプロットする</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># プロットできるように形状を揃える</span>\nZ <span class=\"token operator\">=</span> Z<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>X1<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>contourf<span class=\"token punctuation\">(</span>X1<span class=\"token punctuation\">,</span> X2<span class=\"token punctuation\">,</span> Z<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'RdBu'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlim<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'x1'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'x2'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/images/posts/36/decision_regions.png\" alt=\"decision regions\"></p>\n<p><em>（上図は適当な関数を適用しただけです）</em></p>\n<p><code class=\"language-text\">plt.contourf()</code>は等高線図を引きつつ、領域を塗りつぶしてくれるので決定境界をプロットするのに便利。</p>","fileAbsolutePath":"/home/circleci/project/contents/posts/36.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"cba130fd-9508-54ef-b424-f512bd979a6d"}}}