{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/78.html","webpackCompilationHash":"18ba2da8a5335d6960c8","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"ステータスコードをログに出力するhttp.Handler","time":"2019-09-07T12:05:00+0900","description":null,"tags":["go"]},"html":"<p><code class=\"language-text\">http</code>パッケージだけでWebアプリケーションを書くとき、アクセスログの出力も<code class=\"language-text\">http.Handler</code>で実装しようとするけど、ステータスコードを取得する手段がないことに気づく。</p>\n<p>そこで<code class=\"language-text\">http.ResponseWriter</code>を独自に実装することで解決できたのでメモに残す。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> logger <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  logger <span class=\"token operator\">*</span>log<span class=\"token punctuation\">.</span>Logger\n  handler <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Handler\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">*</span>logger<span class=\"token punctuation\">)</span> <span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  lw <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>loggingResponseWriter<span class=\"token punctuation\">{</span>\n    ResponseWriter<span class=\"token punctuation\">:</span> w<span class=\"token punctuation\">,</span>\n    statusCode<span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  l<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>lw<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n  log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status:%d path:%s\\n\"</span><span class=\"token punctuation\">,</span> lw<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> loggingResponseWriter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  http<span class=\"token punctuation\">.</span>ResponseWriter\n  statusCode <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">*</span>loggingResponseWriter<span class=\"token punctuation\">)</span> <span class=\"token function\">WriteHeader</span><span class=\"token punctuation\">(</span>statusCode <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  w<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> statusCode\n  w<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">.</span><span class=\"token function\">WriteHeader</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">logger</code>という<code class=\"language-text\">http.Handler</code>は他の<code class=\"language-text\">http.Handler</code>をラップするミドルウェアになっている。<code class=\"language-text\">ServeHTTP</code>でラップした<code class=\"language-text\">http.Handler</code>の<code class=\"language-text\">ServeHTTP</code>を呼んだ後で、ログを出力している。</li>\n<li><code class=\"language-text\">loggingResponseWriter</code>という独自の<code class=\"language-text\">http.ResponseWriter</code>を用意する。埋め込みによってinterfaceを実装している。</li>\n<li><code class=\"language-text\">loggingResponseWriter</code>は<code class=\"language-text\">WriteHeader</code>だけ独自に実装し、受け取ったステータスコードを保持するようにしている。こうすることで後でログに出力できる。それ以外のメソッドは埋め込んだ<code class=\"language-text\">http.ResponseWriter</code>に委譲される。</li>\n</ul>","fileAbsolutePath":"/home/circleci/project/contents/posts/78.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8eaae076-a3ac-530b-a36b-dfe9c1d99e39"}}}