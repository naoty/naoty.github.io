{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/37.html","webpackCompilationHash":"6ba61aa3695b65e5eb9d","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"HTMLテンプレートをpackrでバイナリに埋め込む","time":"2018-07-29T17:55:00+0900","description":null,"tags":["go"]},"html":"<p>最近、GoでWebアプリケーションを書く練習をしている。フレームワークとしてEchoを使っている。</p>\n<p>アセットをバイナリに埋め込むときいくつか選択肢があったけど、HTMLテンプレートのパースを実装しやすそうな<a href=\"https://github.com/gobuffalo/packr\">packr</a>を使ってみている。</p>\n<p>以下のようなテンプレートを用意する。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">{{/* assets/views/layout.html */}}\n{{define \"layout\" -}}\n<span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ja<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Task<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    {{template \"content\" . -}}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n{{end}}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">{{/* assets/views/index.html */}}\n{{define \"index\" -}}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Here is content!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n{{end}}</code></pre></div>\n<p>これらのテンプレートは以下のコマンドでバイナリに埋め込むことができる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ packr build</code></pre></div>\n<p>次に、EchoでHTMLをレンダリングするためのRendererを実装する。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// renderer/renderer.go</span>\n\n<span class=\"token comment\">// Renderer is html/template renderer for Echo.</span>\n<span class=\"token keyword\">type</span> Renderer <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\ttemplates <span class=\"token operator\">*</span>template<span class=\"token punctuation\">.</span>Template\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// New parses templates in box and return a new Renderer.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>box packr<span class=\"token punctuation\">.</span>Box<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Renderer <span class=\"token punctuation\">{</span>\n\ttemplates <span class=\"token operator\">:=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"templates\"</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttext <span class=\"token operator\">:=</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t\ttemplates <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Must</span><span class=\"token punctuation\">(</span>templates<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Renderer<span class=\"token punctuation\">{</span>templates<span class=\"token punctuation\">:</span> templates<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Render renders HTML generated by template.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Renderer<span class=\"token punctuation\">)</span> <span class=\"token function\">Render</span><span class=\"token punctuation\">(</span>wr io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> c echo<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tlayout <span class=\"token operator\">:=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Must</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>templates<span class=\"token punctuation\">.</span><span class=\"token function\">Lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"layout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tcontent <span class=\"token operator\">:=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Must</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>templates<span class=\"token punctuation\">.</span><span class=\"token function\">Lookup</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\thtml <span class=\"token operator\">:=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Must</span><span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">.</span><span class=\"token function\">AddParseTree</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">.</span>Tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> html<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteTemplate</span><span class=\"token punctuation\">(</span>wr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"layout\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">packr</code>コマンドでバイナリに埋め込んだアセットは<code class=\"language-text\">box.String(filename)</code>のように取得できる。これを使ってテンプレートをパースしていく。</p>\n<p>Rendererを初期化するときにテンプレートをすべてパースしておいて、レンダリング時にネストしたテンプレートを組み立てて<code class=\"language-text\">Execute</code>するようにしている。</p>\n<p>最後に、このRendererを初期化してEchoに設定する。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// main.go</span>\n\ne <span class=\"token operator\">:=</span> echo<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nviewsBox <span class=\"token operator\">:=</span> packr<span class=\"token punctuation\">.</span><span class=\"token function\">NewBox</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./assets/views\"</span><span class=\"token punctuation\">)</span>\ne<span class=\"token punctuation\">.</span>Renderer <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>viewsBox<span class=\"token punctuation\">)</span></code></pre></div>","fileAbsolutePath":"/home/circleci/project/contents/posts/37.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"659d12eb-944c-516a-bfec-7c79774a2b44"}}}