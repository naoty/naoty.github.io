{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/80.html","webpackCompilationHash":"851492ffdd5ee5aba361","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"ミニマムなwebpack loader","time":"2019-09-18T13:04:00+0900","description":null,"tags":["javascript"]},"html":"<p>webpack loaderを自作したいと思っていろいろ試してみた。以下では、ミニマムにwebpack loaderを自作する手順をまとめてみた。</p>\n<h1>1. webpackのセットアップ</h1>\n<p>webpackとCLIをインストールする。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -D webpack webpack-cli</code></pre></div>\n<p>エントリーポイントと依存するアセットを<code class=\"language-text\">dist/bundle.js</code>にまとめるように設定する。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">\"./src/index.js\"</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bundle.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">\"development\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>適当なエントリーポイントを用意する。あとでここからMarkdownを<code class=\"language-text\">import</code>していく。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/index.js</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is entrypoint.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>webpackが実行できるか確認する。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npx webpack\n$ node dist/bundle.js\nHere is entrypoint.</code></pre></div>\n<h1>2. 何もしないloader</h1>\n<p><code class=\"language-text\">import</code>するMarkdownテキストを<code class=\"language-text\">src/sample.md</code>に用意する。</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> header</span>\nHere is sample markdown text.</code></pre></div>\n<p>エントリーポイントでこのMarkdownテキストを<code class=\"language-text\">import</code>する。</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// src/index.js\n<span class=\"token deleted-sign deleted\">-console.log(\"Here is entrypoint.\");\n</span><span class=\"token inserted-sign inserted\">+import contents from \"./sample.md\";\n+console.log(contents);</span></code></pre></div>\n<p>とりあえず何もしないloaderを作る。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/loader.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>このままだと<code class=\"language-text\">*.md</code>をwebpackはビルドできないので、さっき作ったloaderで処理するように設定を追加する。</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// webpack.config.js\n<span class=\"token unchanged\"> module.exports = {\n   entry: \"./src/index.js\",\n   output: {\n     path: path.resolve(__dirname, \"dist\"),\n     filename: \"bundle.js\"\n   },\n</span><span class=\"token deleted-sign deleted\">-  mode: \"development\"\n</span><span class=\"token inserted-sign inserted\">+  mode: \"development\",\n+  module: {\n+    rules: [\n+      {\n+        test: /\\.md$/,\n+        use: [\n+          {\n+            loader: path.resolve(__dirname, \"lib/loader.js\")\n+          }\n+        ]\n+      }\n+    ]\n+  }\n</span><span class=\"token unchanged\"> };</span></code></pre></div>\n<p>何がおきるか確認する。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npx webpack\n$ node dist/bundle.js\n{}</code></pre></div>\n<p><code class=\"language-text\">import contents from &quot;./sample.md&quot;</code>の結果、<code class=\"language-text\">contents</code>は<code class=\"language-text\">{}</code>になるということがわかった。</p>\n<h1>3. 何かを返すloader</h1>\n<p>loaderが返す値はどのように使われるのか確かめるため、適当な文字列を返すようにしてみる。</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// lib/loader.js\n<span class=\"token unchanged\"> module.exports = function(source) {\n</span><span class=\"token deleted-sign deleted\">-  return \"\";\n</span><span class=\"token inserted-sign inserted\">+  return \"foo\";\n</span><span class=\"token unchanged\"> };</span></code></pre></div>\n<p><code class=\"language-text\">webpack</code>を実行して生成されたbundle.jsを確認してみると、以下のようになっていた。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// dist/bundle.js</span>\n<span class=\"token comment\">/***/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\\n\\n//# sourceURL=webpack:///./src/sample.md?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>loaderが返した文字列を<code class=\"language-text\">eval</code>でJavaScriptのコードとして実行しているようだ。また、<code class=\"language-text\">eval</code>内では関数に渡された<code class=\"language-text\">module</code>と<code class=\"language-text\">exports</code>が使えるようになっている。</p>\n<p>ということは、この<code class=\"language-text\">module</code>を使うことでloaderから何かを<code class=\"language-text\">export</code>できそう。</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// lib/loader.js\n<span class=\"token unchanged\"> module.exports = function(source) {\n</span><span class=\"token deleted-sign deleted\">-  return \"\";\n</span><span class=\"token inserted-sign inserted\">+  return `module.exports = ${JSON.stringify({ source })}`;\n</span><span class=\"token unchanged\"> }</span></code></pre></div>\n<p>webpackを実行してbundle.jsを確認してみる。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// dist/bundle.js</span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"module.exports = {\\\"source\\\":\\\"# header\\\\nHere is sample markdown text.\\\\n\\\"}\\n\\n//# sourceURL=webpack:///./src/sample.md?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">src/sample.md</code>の中身を<code class=\"language-text\">export</code>する文字列が生成できた。最後に<code class=\"language-text\">import</code>できるかも確認する。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node dist/bundle.js\n{ source: &#39;# header\\nHere is sample markdown text.\\n&#39; }</code></pre></div>\n<p><code class=\"language-text\">import contents from &quot;./sample.md&quot;</code>で確かに<code class=\"language-text\">export</code>したオブジェクトが<code class=\"language-text\">import</code>できていた。</p>\n<h1>まとめ</h1>\n<p>以下のような関数が、ファイルの中身をオブジェクトとして返す機能をもったミニマムなwebpack loaderと言えそう。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">module.exports = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> source <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>あとは、Markdownのパースなどの機能をここに実装していけばよさそう。</p>\n<h1>参考</h1>\n<p>他に留意すべき項目はドキュメントにまとまっている。</p>\n<ul>\n<li><a href=\"https://webpack.js.org/contribute/writing-a-loader/\">https://webpack.js.org/contribute/writing-a-loader/</a></li>\n<li><a href=\"https://github.com/webpack/docs/wiki/how-to-write-a-loader\">https://github.com/webpack/docs/wiki/how-to-write-a-loader</a> </li>\n</ul>","fileAbsolutePath":"/home/circleci/project/contents/posts/80.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"307720d0-6003-5572-baff-fc498fdfd572"}}}