{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/71.html","webpackCompilationHash":"18ba2da8a5335d6960c8","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"bit全探索","time":"2019-06-30T23:01:00+0900","description":null,"tags":["algorythm"]},"html":"<p>ある集合のすべての組み合わせを列挙したいときに、bit全探索と呼ばれるアルゴリズムを使うといいことを学んだ。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 組み合わせの数だけループする</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> bit <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> bit<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 組み合わせに含まれる要素</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> numbers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 全要素についてループする</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 要素が組み合わせに含まれるかチェックする</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bit <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 組み合わせに要素を追加する</span>\n        numbers<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"%d\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\" %d\"</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"} \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./a.out\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h1>組み合わせの数</h1>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> bit <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> bit<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ある集合のすべての組み合わせは、各要素について含めるか含めないかの2択によって生まれるので、<code class=\"language-text\">2^&lt;要素数&gt;</code>になる。<code class=\"language-text\">1 &lt;&lt; n</code>は<code class=\"language-text\">2^n</code>と同じなので、組み合わせの数だけループしていることになる。</p>\n<h1>組み合わせの作り方</h1>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bit <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">bit &amp; (1 &lt;&lt; i)</code>は要素<code class=\"language-text\">i</code>が組み合わせに含まれるかをチェックしている。<code class=\"language-text\">&amp;</code>はAND演算なので、<code class=\"language-text\">bit</code>と<code class=\"language-text\">(1 &lt;&lt; i)</code>をそれぞれ2進数として考える。</p>\n<p><code class=\"language-text\">bit</code>は上のコードだと<code class=\"language-text\">0</code>から<code class=\"language-text\">7</code>までの数になるので、2進数では<code class=\"language-text\">000</code>から<code class=\"language-text\">111</code>までということになる。</p>\n<p>一方、<code class=\"language-text\">i</code>は上のコードだと<code class=\"language-text\">0</code>, <code class=\"language-text\">1</code>, <code class=\"language-text\">2</code>なので、<code class=\"language-text\">(1 &lt;&lt; i)</code>はそれぞれ<code class=\"language-text\">001</code>, <code class=\"language-text\">010</code>, <code class=\"language-text\">100</code>になる。</p>\n<p>なので、<code class=\"language-text\">bit</code>が<code class=\"language-text\">000</code>だったらどの要素も含まれないことになるし、<code class=\"language-text\">101</code>だったら<code class=\"language-text\">0</code>と<code class=\"language-text\">2</code>が含まれることになる。つまり、要素の組み合わせを<code class=\"language-text\">bit</code>が示す2進数で表していると言える。</p>","fileAbsolutePath":"/home/circleci/project/contents/posts/71.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"7c760ddc-d73d-5054-8901-ff10e79b8b02"}}}