{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/73.html","webpackCompilationHash":"de2f1841ef2b51591ce3","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"ECSタスクでRakeタスクを定期実行する","time":"2019-07-04T23:27:00+0900","description":null,"tags":["aws","rails","terraform"]},"html":"<p>ECSサービスとしてRailsアプリケーションを運用しているとき、定期実行したいRakeタスクはcronで管理するよりもECS scheduled taskとして管理すると思う。</p>\n<p>まず、RakeタスクをECS（Fargate）上で実行するため、ECSタスク定義をつくる。</p>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_ecs_task_definition\"</span></span> <span class=\"token string\">\"rake\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">family</span>                   <span class=\"token punctuation\">=</span> <span class=\"token string\">\"rake\"</span>\n  <span class=\"token property\">task_role_arn</span>            <span class=\"token punctuation\">=</span> aws_iam_role.ecs_task.arn\n  <span class=\"token property\">execution_role_arn</span>       <span class=\"token punctuation\">=</span> aws_iam_role.ecs_execution.arn\n  <span class=\"token property\">network_mode</span>             <span class=\"token punctuation\">=</span> <span class=\"token string\">\"awsvpc\"</span>\n  <span class=\"token property\">cpu</span>                      <span class=\"token punctuation\">=</span> <span class=\"token number\">256</span>\n  <span class=\"token property\">memory</span>                   <span class=\"token punctuation\">=</span> <span class=\"token number\">512</span>\n  <span class=\"token property\">requires_compatibilities</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"FARGATE\"</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token property\">container_definitions</span>  <span class=\"token punctuation\">=</span> <span class=\"token heredoc string\">&lt;&lt;DOCUMENT\n[\n  {\n    \"name\": \"rails\",\n    \"image\": \"${aws_ecr_repository.rails.repository_url}:latest\",\n    \"command\": [\"exit\", \"1\"],\n    \"environment\": [\n      { \"name\": \"RAILS_ENV\", \"value\": \"production\" }\n    ],\n    \"logConfiguration\": {\n      \"logDriver\": \"awslogs\",\n      \"options\": {\n        \"awslogs-group\": \"${aws_cloudwatch_log_group.rails.name}\",\n        \"awslogs-region\": \"ap-northeast-1\",\n        \"awslogs-stream-prefix\": \"rake\"\n      }\n    }\n  }\n]\nDOCUMENT</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>定期実行したいRakeタスクごとにECSタスク定義を作るのは非効率なので、Rakeタスク専用のタスク定義をつくる。</li>\n<li>後ほど、実行するコマンドをoverrideするため、タスク定義のコマンドでは<code class=\"language-text\">exit 1</code>を実行するようにしている。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"hcl\"><pre class=\"language-hcl\"><code class=\"language-hcl\"><span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_cloudwatch_event_rule\"</span></span> <span class=\"token string\">\"push_notifications_schedule\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">name</span>                <span class=\"token punctuation\">=</span> <span class=\"token string\">\"push-schedule\"</span>\n  <span class=\"token property\">schedule_expression</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"cron(0 20 * * ? *)\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">resource <span class=\"token type variable\">\"aws_cloudwatch_event_target\"</span></span> <span class=\"token string\">\"push_notifications\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">rule</span>     <span class=\"token punctuation\">=</span> aws_cloudwatch_event_rule.push_notifications_schedule.name\n  <span class=\"token property\">arn</span>      <span class=\"token punctuation\">=</span> aws_ecs_cluster.production.arn\n  <span class=\"token property\">role_arn</span> <span class=\"token punctuation\">=</span> aws_iam_role.ecs_events.arn\n\n  <span class=\"token keyword\">ecs_target</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">launch_type</span>         <span class=\"token punctuation\">=</span> <span class=\"token string\">\"FARGATE\"</span>\n    <span class=\"token property\">task_count</span>          <span class=\"token punctuation\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token property\">task_definition_arn</span> <span class=\"token punctuation\">=</span> aws_ecs_task_definition.rake.arn\n\n    <span class=\"token keyword\">network_configuration</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">subnets</span>         <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span>aws_subnet.private_a.id, aws_subnet.private_c.id<span class=\"token punctuation\">]</span>\n      <span class=\"token property\">security_groups</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span>aws_security_group.internal.id<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token property\">input</span> <span class=\"token punctuation\">=</span> <span class=\"token heredoc string\">&lt;&lt;DOCUMENT\n{\n  \"containerOverrides\": [\n    {\n      \"name\": \"rails\",\n      \"command\": [\"bin/rails\", \"push_notifications\"]\n    }\n  ]\n}\nDOCUMENT</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">aws_cloudwatch_event_rule</code>はスケジュールごとに書き、そのスケジュールで実行するRakeタスクごとに<code class=\"language-text\">aws_cloudwatch_event_target</code>を書くことになる。なので、production環境とstaging環境で同じスケジュールを使う場合は、<code class=\"language-text\">aws_cloudwatch_event_rule</code>は共用することになる。</li>\n<li><code class=\"language-text\">aws_cloudwatch_event_target</code>では、<code class=\"language-text\">ecs_target</code>でFargate上でECSタスクを実行するためのオプションを指定する必要がある。<code class=\"language-text\">input</code>でコンテナ定義のoverrideができるので、ここで<code class=\"language-text\">exit 1</code>としていた実行コマンドをoverrideしている。</li>\n</ul>","fileAbsolutePath":"/home/circleci/project/contents/posts/73.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"fa48e2bd-0d75-5100-8b13-ef441eda5a8b"}}}