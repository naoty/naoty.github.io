{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/33.html","webpackCompilationHash":"c3c2b866c676673f3ef0","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"パラメータストアで環境変数を管理する","time":"2018-06-08T21:57:00+0900","description":"パラメータストアから環境変数をセットしてRailsを起動する話","tags":["aws","rails"]},"html":"<p>最近、ECSで運用しているRailsアプリの起動時にパラメータストアから環境変数を取得して設定するようにした。</p>\n<h2>背景</h2>\n<p>それまでは環境変数はコンテナ定義に指定されていたが、それをパラメータストアを使った方法に移行した。理由としては、機密情報をコンテナ定義の環境変数に設定するのは推奨されていないからだ。</p>\n<p>また、開発環境で利用する環境変数が開発者によってバラバラに管理されていた（ローカルの<code class=\"language-text\">.env</code>ファイルによって管理されていた）ため、新しく開発に参加する際に正しい環境変数が何なのか把握するのが大変だった。</p>\n<h2>パラメータストア</h2>\n<p>パラメータストアとは、AWSが提供する階層型ストレージのことで、設定のような軽いデータを安全に管理できる。KMSによる暗号化も可能なので機密情報を含む環境変数の管理に向いていそうだと判断した。</p>\n<h2>環境変数をパラメータストアに移す</h2>\n<p>バラバラに管理されていた環境変数をパラメータストアに移した。パラメータストアは階層構造になっており、ある階層下にある値をまとめて取得することができる。</p>\n<p>今回は<code class=\"language-text\">/&lt;アプリケーション名&gt;/&lt;実行環境&gt;/&lt;環境変数名&gt;</code>という階層で環境変数を管理することにした。例えば、<code class=\"language-text\">/myapp/production/PASSWORD</code>のような感じだ。</p>\n<h2>コンテナからパラメータストアにアクセスする</h2>\n<p>ECSコンテナからパラメータストアにアクセスするには権限が必要になる。パラメータストアへの移行と同時並行でECSコンテナでIAMロールを使うように修正していたので、このIAMロールにパラメータストアにアクセスするためのポリシーを付与した。</p>\n<h2>Rails起動時に環境変数をセットする</h2>\n<p>環境変数はRailsの起動プロセスの中で参照されることがある（データベースとの接続など）ため、起動プロセスの初期に環境変数を設定する必要がある。</p>\n<p>いくつかRubygemがあるようだったが、たいした実装ではないので簡単なコードを書いて環境変数を起動プロセスの初期に設定するようにした。</p>\n<p>注意点としては、パラメータストアから取得した環境変数よりも既存の環境変数を優先させた点だ。ECSからタスクとしてコンテナを起動するときなど、コンテナ定義から環境変数を指定することでパラメータストアの環境変数を上書きできると便利なケースがあったからだ。また、開発環境では<code class=\"language-text\">docker-compose.yml</code>で指定した環境変数を優先することも可能になる。</p>","fileAbsolutePath":"/home/circleci/project/contents/posts/33.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b26eb7cd-8bb0-55b3-b5da-73c98614de6d"}}}