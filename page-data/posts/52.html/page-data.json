{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/52.html","webpackCompilationHash":"e5d4fad2174cb11a3fa7","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"スレッド化できるSlack webhookを作った","time":"2018-12-27T17:28:00+0900","description":null,"tags":null},"html":"<p><img src=\"/images/posts/52/thread.png\" alt=\"thread\"></p>\n<p>Slackへの通知をスレッド化するため、<a href=\"https://github.com/naoty/slack-thread-webhook\">naoty/slack-thread-webhook</a>という簡単なプロキシをGoで作った。</p>\n<h1>作った理由</h1>\n<p>CIからの通知をSlackに送るようにしていると、CIからの通知でchannelが埋まってしまうようなことがよくあると思う。しかも、複雑な処理をCI上で行うと、細かく分解されたジョブから大量の通知が来るようになる。そこで、こういった簡単なプロキシを作って同じworkflowの通知をスレッドにまとめようと考えた。</p>\n<h1>これは何か</h1>\n<p>slack-thread-webhookは<code class=\"language-text\">POST /hooks/&lt;id&gt;</code>というエンドポイントを持っており、Slackのincoming webhookと同じリクエストボディを受け付ける。このエンドポイントにリクエストを送ると、初回はメッセージとしてSlackに転送し、同じ<code class=\"language-text\">&lt;id&gt;</code>に二回以上送ると初回に送られたメッセージのスレッドに転送する。</p>\n<p>内部的には、Slackにスレッドとしてメッセージを送るために必要な親メッセージのtimestampを<code class=\"language-text\">&lt;id&gt;</code>とともにRedisに保持するようにしている。</p>\n<h1>どう使うのか</h1>\n<p>上のスクショのようなCIの通知では、例えばCircle CIの<code class=\"language-text\">CIRCLE_WORKFLOW_ID</code>のような一連のジョブで共通するIDを使って、以下のようにリクエストを送ることでスレッドに通知をまとめることができる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cat &lt;&lt; EOS | curl -X POST -H &quot;Content-Type: application/json&quot; -d @- https://slack-thread-webhook.herokuapp.com/hooks/${CIRCLE_WORKFLOW_ID}\n{\n  &quot;attachments&quot;: [\n    {\n      &quot;title&quot;: &quot;Start&quot;,\n      &quot;text&quot;: &quot;$(git log -1 --pretty=&#39;%an: %s&#39;)&quot;,\n      &quot;footer&quot;: &quot;naoty/slack-thread-webhook | ${CIRCLE_BRANCH}&quot;\n    }\n  ]\n}\nEOS</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cat &lt;&lt; EOS | curl -X POST -H &quot;Content-Type: application/json&quot; -d @- https://slack-thread-webhook.herokuapp.com/hooks/${CIRCLE_WORKFLOW_ID}\n{\n  &quot;attachments&quot;: [\n    {\n      &quot;color&quot;: &quot;good&quot;,\n      &quot;title&quot;: &quot;Finish &lt;${CIRCLE_BUILD_URL}|${CIRCLE_JOB}&gt;&quot;\n    }\n  ]\n}\nEOS</code></pre></div>\n<h1>どうやって始めるのか</h1>\n<p>Herokuで簡単に動かせるようにHeroku buttonを作った（ブログのCSSででかくなっちゃったけど面倒だからこのまま）。</p>\n<p><a href=\"https://heroku.com/deploy\"><img src=\"https://www.herokucdn.com/deploy/button.svg\" alt=\"Deploy\"></a></p>\n<p>また、Docker HubにDockerイメージを公開しているので、ECS等で動かす場合にはこちらを使うとセットアップしやすいと思う。</p>\n<p><a href=\"https://hub.docker.com/r/naoty/slack-thread-webhook\">https://hub.docker.com/r/naoty/slack-thread-webhook</a></p>","fileAbsolutePath":"/home/circleci/project/contents/posts/52.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"5e1197a6-d3be-5624-b315-536b47f5d554"}}}