{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/75.html","webpackCompilationHash":"12bcd1ad9018fe69dd60","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"mrubyの初手","time":"2019-08-07T12:06:00+0900","description":null,"tags":["mruby"]},"html":"<p>環境構築からmrubyを実行するCのコードをビルドするまで。</p>\n<h1>環境構築</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> hello-mruby\n$ <span class=\"token builtin class-name\">cd</span> hello-mruby\n$ <span class=\"token function\">vi</span> Dockerfile</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted-sign inserted\">+FROM ruby:1.9\n+RUN apt update &amp;&amp; \\\n+  apt install -y bison --no-install-recommends &amp;&amp; \\\n+  git clone https://github.com/mruby/mruby &amp;&amp; \\\n+  cd mruby &amp;&amp; \\\n+  ./minirake\n+ENV PATH /mruby/bin:$PATH\n+CMD [\"bash\"]</span></code></pre></div>\n<ul>\n<li><a href=\"https://github.com/mruby/mruby/blob/master/doc/guides/compile.md#prerequisites\">ドキュメント</a>を読むと、mrubyのビルドにはRuby 1.8か1.9、gcc、ar、bisonが必要とのことだった。<code class=\"language-text\">ruby:1.9</code>のイメージをベースにして、入ってなかったbisonだけインストールした。</li>\n<li><code class=\"language-text\">./minirake</code>でmrubyがビルドされる。<code class=\"language-text\">bin/</code>以下にmrbcなどがあるので<code class=\"language-text\">PATH</code>に追加しておく。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build <span class=\"token builtin class-name\">.</span> -t naoty/hello-mruby\n$ docker run -it --rm naoty/hello-mruby\n% mirb\nmirb - Embeddable Interactive Ruby Shell\n\n<span class=\"token operator\">></span> MRUBY_VERSION\n <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"2.0.1\"</span>\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">exit</span>\n% <span class=\"token builtin class-name\">exit</span></code></pre></div>\n<ul>\n<li>Dockerでmrubyをビルドできたことを確認した。</li>\n</ul>\n<h1>サンプルコードを追加する</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> Dockerfile</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"> FROM ruby:1.9\n RUN apt update &amp;&amp; \\\n   apt install -y bison --no-install-recommends &amp;&amp; \\\n   git clone https://github.com/mruby/mruby &amp;&amp; \\\n   cd mruby &amp;&amp; \\\n   ./minirake\n ENV PATH /mruby/bin:$PATH\n</span><span class=\"token inserted-sign inserted\">+WORKDIR /hello-mruby\n+COPY . /hello-mruby/\n</span><span class=\"token unchanged\"> CMD [\"bash\"]</span></code></pre></div>\n<ul>\n<li>サンプルコードを用意していくので<code class=\"language-text\">WORKDIR</code>を用意する。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> hello.rb</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted-sign inserted\">+puts \"Hello, mruby!\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build <span class=\"token builtin class-name\">.</span> -t naoty/hello-mruby</code></pre></div>\n<ul>\n<li>サンプルコードを追加してDockerイメージに追加する。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it --rm -v <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span>:/hello-mruby naoty/hello-mruby\n% mrbc hello.rb\n% <span class=\"token builtin class-name\">exit</span></code></pre></div>\n<ul>\n<li>カレントディレクトリをマウントしてイメージを起動する。</li>\n<li>mrbcで<code class=\"language-text\">hello.rb</code>から<code class=\"language-text\">hello.mrb</code>を生成する。マウントしているので、ホストにも<code class=\"language-text\">hello.mrb</code>が追加されている。</li>\n</ul>\n<h1>Cからmrubyを実行する</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> hello.c</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted-sign inserted\">+#include &lt;mruby.h>\n+#include &lt;mruby/dump.h>\n+#include &lt;stdio.h>\n+\n+int main() {\n+  mrb_state *mrb = mrb_open();\n+\n+  FILE *fd = fopen(\"hello.mrb\", \"r\");\n+  mrb_load_irep_file(mrb, fd);\n+\n+  mrb_close(mrb);\n+\n+  return 0;\n+}</span></code></pre></div>\n<ul>\n<li>生成した<code class=\"language-text\">hello.mrb</code>を実行するCのコードを書く。</li>\n<li>Cのコードは雰囲気で書いてるけど、<code class=\"language-text\">mrb_open</code>と<code class=\"language-text\">mrb_close</code>はお約束みたいで、<code class=\"language-text\">mrb_load_irep_file</code>によってmrbファイルを<code class=\"language-text\">load</code>するっぽい。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it --rm -v <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span>:/hello-mruby naoty/hello-mruby\n% gcc hello.c -I/mruby/include -L/mruby/build/host/lib -lmruby -lm -o hello\n% ./hello\nHello, mruby<span class=\"token operator\">!</span></code></pre></div>\n<ul>\n<li>書いたCのコードをビルドするため、もう一度Dockerイメージを起動する。</li>\n<li><code class=\"language-text\">hello.c</code>を<code class=\"language-text\">gcc</code>でビルドするには、まずヘッダーファイル<code class=\"language-text\">mruby.h</code>のパスを指定する必要がある。mrubyのヘッダーファイルは<code class=\"language-text\">/mruby/include/</code>以下にあるので、<code class=\"language-text\">-I</code>オプションで指定している。</li>\n<li>次に、mruby本体のソースコードとともに<code class=\"language-text\">hello.c</code>をビルドする必要がある。mrubyのライブラリは<code class=\"language-text\">/mruby/build/host/lib/libmruby.a</code>なので、<code class=\"language-text\">-L</code>オプションにパスを指定し、<code class=\"language-text\">-l</code>オプションで<code class=\"language-text\">mruby</code>を指定している。</li>\n<li>また、ビルドすると<code class=\"language-text\">/mruby/src/numeric.c:321: undefined reference to &#39;round&#39;</code>のようなエラーが出てしまう。Mathのライブラリが足りなさそうなので、<code class=\"language-text\">-lm</code>オプションをつけて<code class=\"language-text\">libm.so</code>をリンクしている。</li>\n<li>無事にビルドできた実行可能ファイルを実行してみると、<code class=\"language-text\">hello.rb</code>で書いたコードが実行された。</li>\n</ul>\n<hr>\n<h1>追記</h1>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">Rubyは最新で問題ないです！問題があれば直すべきなので1.9はやめましょう… / 1件のコメント <a href=\"https://t.co/uu6C7Y3g0k\">https://t.co/uu6C7Y3g0k</a> “mrubyの初手” (1 user) <a href=\"https://t.co/2bFP5uPQAu\">https://t.co/2bFP5uPQAu</a></p>&mdash; Uchio KONDO 🔫 (@udzura) <a href=\"https://twitter.com/udzura/status/1158943027215253510?ref_src=twsrc%5Etfw\">August 7, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"ja\" dir=\"ltr\">ドキュメント(docs/guides/compile.md) を「2.0 or later」にアップデートします</p>&mdash; Yukihiro Matsumoto (@yukihiro_matz) <a href=\"https://twitter.com/yukihiro_matz/status/1159001970536923137?ref_src=twsrc%5Etfw\">August 7, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>とのことなので、ベースイメージを<code class=\"language-text\">ruby:2.6</code>にしてみたけど問題なく上記の手順ができた。</p>","fileAbsolutePath":"/home/circleci/project/contents/posts/75.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"672094a7-342b-5109-b72b-de161552221b"}}}