{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/46.html","webpackCompilationHash":"a24b3af123717b3d4c40","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"デプロイに伴うデータ不整合を回避する","time":"2018-11-10T00:06:00+0900","description":null,"tags":null},"html":"<p>これまでの開発を振り返ると、いろんなチームで繰り返し起きる障害のひとつとして、デプロイ時に行うカラムの追加/削除によってコードとの不整合がおきることがある。</p>\n<p>開発時はカラムの追加/削除をカジュアルに行ってしまうものの、本番環境にデプロイするときはデプロイする順番を慎重に検討する必要がある。</p>\n<p>ある程度経験を積んだプログラマーなら当然かもしれないけど、普段意識していることをまとめてみた。</p>\n<h1>カラム追加時</h1>\n<p>新しくカラムを追加するとき、<code class=\"language-text\">NOT NULL</code>制約をつける場合は<code class=\"language-text\">DEFAULT</code>もできるだけつけた方がいい。ただし、外部キー等<code class=\"language-text\">DEFAULT</code>を決められない場合、<code class=\"language-text\">NOT NULL</code>制約をつけずコード上ではカラムの値が空であることを意識してコードを書く。</p>\n<p>仮に<code class=\"language-text\">DEFAULT</code>を指定せずに<code class=\"language-text\">NOT NULL</code>制約をつけた場合、アプリケーション側でデフォルト値を設定するようなコードを書いたとしても、カラムが追加されてからそれがデプロイされるまでの間にレコードが追加されてしまい、エラーになってしまう。</p>\n<p>なので、<code class=\"language-text\">NOT NULL</code>制約をつけずにカラムの値が空であることを意識してコードを書く。コードがデプロイされてからカラムの値が空ではないことを確認できたら、<code class=\"language-text\">NOT NULL</code>制約をつける。</p>\n<p><code class=\"language-text\">NOT NULL</code>制約をつけるカラムを追加するデプロイは以下のように2段階に分けることが多い。</p>\n<ol>\n<li><code class=\"language-text\">NOT NULL</code>制約をつけずにカラムを追加するmigrationとそのカラムを利用するコードをデプロイする。このとき、カラムが空になっているレコードもあることに注意する。</li>\n<li>スクリプト等ですべてのレコードのカラムが空じゃないことが確認できたら、<code class=\"language-text\">NOT NULL</code>制約をつける。また、カラムが空でないことを前提にコードも修正する。</li>\n</ol>\n<h1>カラム削除時</h1>\n<p>カラムの削除を伴うデプロイを行うとき、そのカラムを利用するコードが存在しないことを確認してから削除を行う必要がある。なので、カラムを削除するデプロイは以下のように2段階に分ける。</p>\n<ol>\n<li>削除予定のカラムを利用しないようにコードを修正してデプロイする。</li>\n<li>カラムを削除する。</li>\n</ol>","fileAbsolutePath":"/home/circleci/project/contents/posts/46.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a634deb8-fe56-5048-8d03-2373c76ad49e"}}}