{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/77.html","webpackCompilationHash":"97367d68131231dbd68c","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"goroutineの実行パターン","time":"2019-09-01T18:43:00+0900","description":null,"tags":["go"]},"html":"<p>最近、<a href=\"https://www.oreilly.co.jp/books/9784873118468/\">Go言語による並行処理</a>を読んでいる。その中で明示的には紹介されていないものの、頻繁に登場するコードを整理して理解したい。</p>\n<p>以下のコード例では、goroutineを実行してその結果を受信するchannelを取得できる関数を定義している。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// goroutineの結果を表す型</span>\n<span class=\"token keyword\">type</span> result <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  value <span class=\"token builtin\">int</span>\n  err   <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n\ngenerate <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> result <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 送受信可能なchannelを生成する</span>\n  ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> result<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// channelに結果を送信するgoroutineを実行する</span>\n  <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// channelを確実に終了させる</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n\n    err <span class=\"token operator\">:=</span> <span class=\"token function\">something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n      ch <span class=\"token operator\">&lt;-</span> result<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    ch <span class=\"token operator\">&lt;-</span> result<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">:</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 返り値の型が&lt;-chanなので受信専用のchannelとして返る</span>\n  <span class=\"token keyword\">return</span> ch\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>関数の返り値が<code class=\"language-text\">&lt;-chan result</code>になっているため、この関数を呼び出す側はこのchannelから値を受信することしかできない。</li>\n<li>goroutine内で<code class=\"language-text\">defer</code>によって確実にchannelを終了させる。</li>\n<li>goroutineの結果を表す型を定義して<code class=\"language-text\">error</code>を含めた値をchannelに送ることで、呼び出す側でエラーハンドリングできるようにしている。</li>\n</ul>","fileAbsolutePath":"/home/circleci/project/contents/posts/77.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"606e3ceb-fad6-5e60-b315-04c31eed96a6"}}}