{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/64.html","webpackCompilationHash":"b325140d05d8cafd326e","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"SQLで順番を更新する","time":"2019-04-26T17:08:00+0900","description":null,"tags":["db"]},"html":"<h1>状況</h1>\n<p>順番をもつテーブルでレコードの順番を更新したい。例えば、タスク管理アプリケーションであるタスクの順番を上げたり下げたりしたい場合を想定する。</p>\n<h1>問題</h1>\n<p>単純にレコードの順番を更新したい値に更新するだけでは不十分で、前後のタスクの順番も繰り上げたり繰り下げる必要がある。そのため、多数のレコードを更新する可能性がある。</p>\n<h1>解決</h1>\n<p>タスク管理アプリケーションの<code class=\"language-text\">tasks</code>テーブルを例にとって考える。タスクの順番は<code class=\"language-text\">position</code>カラムで表すことにする。</p>\n<p>順番を上げる場合と下げる場合でSQLを分ける。まず、順番を上げる場合、例えば、4番目のタスクを2番目に上げる場合はこう書く。</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span>\n  tasks\n<span class=\"token keyword\">SET</span>\n  position <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">CASE</span>\n              <span class=\"token keyword\">WHEN</span> position <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">THEN</span> <span class=\"token number\">2</span>\n              <span class=\"token keyword\">WHEN</span> position <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token operator\">AND</span> position <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token keyword\">THEN</span> position <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n              <span class=\"token keyword\">ELSE</span> position\n              <span class=\"token keyword\">END</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WHERE</span>\n  position <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">2</span> <span class=\"token operator\">AND</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">;</span></code></pre></div>\n<p>次に、順番を下げる場合、例えば、2番目のタスクを4番目に下げる場合はこう書く。</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span>\n  tasks\n<span class=\"token keyword\">SET</span>\n  position <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">CASE</span>\n              <span class=\"token keyword\">WHEN</span> position <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token keyword\">THEN</span> <span class=\"token number\">4</span>\n              <span class=\"token keyword\">WHEN</span> position <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">AND</span> position <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">THEN</span> position <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n              <span class=\"token keyword\">ELSE</span> position\n              <span class=\"token keyword\">END</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">WHERE</span>\n  position <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">2</span> <span class=\"token operator\">AND</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">;</span></code></pre></div>\n<p>SQLのポイントは以下の通り。</p>\n<ul>\n<li><code class=\"language-text\">CASE</code>式を使って条件付きの更新処理を一括で行うようにしている。<code class=\"language-text\">CASE</code>式を使わずに以下のように2つに分けて書いてしまうと、最初のSQLで更新されたレコードが次のSQLの条件に含まれてしまい誤った値（この場合は3）に更新されてしまう。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> tasks <span class=\"token keyword\">SET</span> position <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token keyword\">WHERE</span> position <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">UPDATE</span> tasks <span class=\"token keyword\">SET</span> position <span class=\"token operator\">=</span> position <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">WHERE</span> position <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token operator\">AND</span> position <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">WHERE</code>句で更新の対象となるレコードを最小限に絞り込んでいる。<code class=\"language-text\">UPDATE</code>文は条件を指定しないとすべてのレコードにマッチしてしまうため、更新対象となる範囲を指定している。</li>\n</ul>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://www.shoeisha.co.jp/book/detail/9784798157825\">達人に学ぶSQL徹底指南書 第2版</a></li>\n</ul>","fileAbsolutePath":"/home/circleci/project/contents/posts/64.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"fd4a63fe-0d15-5c4c-8caf-5efaf5e35997"}}}