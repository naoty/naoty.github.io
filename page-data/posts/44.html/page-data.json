{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/44.html","webpackCompilationHash":"680a920d8f15d35e8f83","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"ECSサービスの分け方","time":"2018-10-02T21:22:00+0900","description":null,"tags":["aws"]},"html":"<p>ECSサービスを作るとき、いくつかパターンがあることに気づいたのでメモ。</p>\n<ol>\n<li>コンテナのtagごとに作るパターン</li>\n<li>コマンドごとに作るパターン</li>\n<li>環境変数の組み合わせごとに作るパターン</li>\n<li>スケールアウトの粒度ごとに作るパターン</li>\n</ol>\n<h1>コンテナのtag</h1>\n<p>Dockerコンテナには、コミットIDをtagにするのと同時に、<code class=\"language-text\">master</code>と<code class=\"language-text\">develop</code>ブランチではブランチ名をtagに加えている。productionのappサービスは<code class=\"language-text\">master</code>のtagを使うようにタスク定義を作ってるし、stagingのappサービスは<code class=\"language-text\">develop</code>のtagを使うようにタスク定義を作っている。それぞれタスク定義が分かれているのでサービスも分かれている。</p>\n<h1>コマンド</h1>\n<p>同じDockerコンテナを使っていた場合でも、例えばrailsサービスとsidekiqサービスのように別々のサービスを起動させることがある。こういう場合もそれぞれコマンドごとにタスク定義を作ってサービスを分けることになる。</p>\n<h1>環境変数の組み合わせ</h1>\n<p>同じDockerコンテナで同じコマンドを実行する場合でも、環境変数を使って例えばDBの接続先やDB名といった外部サービスを変えることがある。環境変数はタスク定義で指定するので、利用する環境変数の組み合わせごとにタスク定義を作り、サービスを作ることになる。</p>\n<p>とはいえ、環境変数の指定方法はいくつか考えられるし、サービスディスカバリを使って外部サービスを参照することで環境変数を使わない方法も考えられるので、避けられるかもしれない。</p>\n<h1>スケールアウト</h1>\n<p>特定のパスの負荷が高い場合などに専用のサービスを作って、部分的にスケールアウトさせるということも考えられそう。場合によってはタスク定義も分けて割り当てるリソースを増やすなど最適化させることもありそう。</p>","fileAbsolutePath":"/home/circleci/project/contents/posts/44.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b492bd86-8889-5a49-b18f-3d5f08b8a422"}}}