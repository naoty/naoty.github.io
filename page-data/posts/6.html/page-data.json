{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/6.html","webpackCompilationHash":"a20f6db80ca390cd7b11","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"ActiveRecordのattributeメソッド","time":"2017-12-08T23:00:00+0900","description":"ActiveRecordのattributeは","tags":["rails"]},"html":"<div class=\"gatsby-highlight\" data-language=\"rb\"><pre class=\"language-rb\"><code class=\"language-rb\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n  attribute <span class=\"token symbol\">:unencrypted_password</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:string</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">attribute</code>メソッドはモデルに属性を追加する。</li>\n<li>DBのカラムがなくても追加できる。</li>\n<li>DBのカラムのアクセサをoverrideすることもできる。</li>\n</ul>\n<h1>例：パスワードのvalidation</h1>\n<p>パスワードのvalidationを実装する場合を考える。パスワードのvalidationというのは、暗号化される前の値に対して行われる。生パスワードはDBに保存しないが、アクセサがあると便利なので<code class=\"language-text\">attribute</code>メソッドで追加する。<code class=\"language-text\">attribute</code>メソッドで追加した仮想的なカラムにはvalidationが使える。</p>\n<div class=\"gatsby-highlight\" data-language=\"rb\"><pre class=\"language-rb\"><code class=\"language-rb\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n  attribute <span class=\"token symbol\">:unencrypted_password</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:string</span>\n\n  before_save <span class=\"token symbol\">:encrypt_password</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">:</span> unencrypted_password_changed<span class=\"token operator\">?</span>\n\n  validates <span class=\"token symbol\">:unencrypted_password</span><span class=\"token punctuation\">,</span>\n    format<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> with<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\A[0-9a-zA-Z]\\z/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    length<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> minimum<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> maximum<span class=\"token punctuation\">:</span> <span class=\"token number\">36</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    presence<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span>\n\n  <span class=\"token keyword\">private</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">encrypt_password</span></span>\n    cost <span class=\"token operator\">=</span> <span class=\"token constant\">BCrypt</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Engine</span><span class=\"token punctuation\">.</span>cost\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token constant\">BCrypt</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Password</span><span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>unencrypted_password<span class=\"token punctuation\">,</span> cost<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>","fileAbsolutePath":"/home/circleci/project/contents/posts/6.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"04328545-b7f0-5226-a5ac-fc5db4bd9b55"}}}