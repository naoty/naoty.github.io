{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/63.html","webpackCompilationHash":"d053bfff98a77f215f59","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"normalizrの使い方","time":"2019-04-12T20:23:00+0900","description":null,"tags":["javascript"]},"html":"<p>最近、Nuxt.jsでカンバンアプリを作る練習をしていて、そこで<a href=\"https://github.com/paularmstrong/normalizr\">normalizr</a>を使っている。GraphQLのレスポンスをnormalizrで正規化してVuexのStoreに保存している。normalizrを使って正規化されたデータは、特にネストしたデータをループしたい場合、Vueコンポーネント内で扱いやすいので、重宝している。</p>\n<p>normalizrの使い方を理解するのに少し手間取ったので、自分のためにメモしておきたい。</p>\n<h1>オブジェクト</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> normalize<span class=\"token punctuation\">,</span> schema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normalizr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"TODO\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Entity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"statuses\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   entities: {</span>\n<span class=\"token comment\">//     statuses: {</span>\n<span class=\"token comment\">//       \"1\": {</span>\n<span class=\"token comment\">//         id: 1,</span>\n<span class=\"token comment\">//         name: \"TODO\"</span>\n<span class=\"token comment\">//       }</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//   },</span>\n<span class=\"token comment\">//   result: 1</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">normalize(&lt;正規化したいデータ&gt;, &lt;スキーマ&gt;)</code>という使い方をする。</li>\n<li><code class=\"language-text\">new schema.Entity(&lt;キー&gt;)</code>でスキーマを初期化する。キーは正規化したデータのプロパティ名に使われる。</li>\n<li>正規化されたデータは<code class=\"language-text\">id</code>の値をキーとしたオブジェクトになっている。デフォルトでは<code class=\"language-text\">id</code>プロパティをキーに使うけど、<code class=\"language-text\">idAttribute</code>オプションで<code class=\"language-text\">id</code>以外のプロパティをキーに使うことができる。</li>\n</ul>\n<h1>配列</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> normalize<span class=\"token punctuation\">,</span> schema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normalizr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"TODO\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Entity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"statuses\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> statuses <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Array</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> statuses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   entities: {</span>\n<span class=\"token comment\">//     statuses: {</span>\n<span class=\"token comment\">//       \"1\": {</span>\n<span class=\"token comment\">//         id: 1,</span>\n<span class=\"token comment\">//         name: \"TODO\"</span>\n<span class=\"token comment\">//       }</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//   },</span>\n<span class=\"token comment\">//   result: 1</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<ul>\n<li>正規化したいデータが配列の場合、<code class=\"language-text\">schema.Array</code>を<code class=\"language-text\">normalize</code>に渡す。</li>\n</ul>\n<h1>名前つきの配列</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> normalize<span class=\"token punctuation\">,</span> schema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normalizr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  statuses<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"TODO\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Entity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"statuses\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> statuses <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Array</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> statuses <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   entities: {</span>\n<span class=\"token comment\">//     statuses: {</span>\n<span class=\"token comment\">//       \"1\": {</span>\n<span class=\"token comment\">//         id: 1,</span>\n<span class=\"token comment\">//         name: \"TODO\"</span>\n<span class=\"token comment\">//       }</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//   },</span>\n<span class=\"token comment\">//   result: {</span>\n<span class=\"token comment\">//     statuses: [1]</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">statuses: [...]</code>のような名前がついた配列の場合、<code class=\"language-text\">schema.Object</code>を使ってどのプロパティに対してどのスキーマを使うかをマッピングすることで正規化できるようになる。</li>\n</ul>\n<h1>ネストしたオブジェクト</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> normalize<span class=\"token punctuation\">,</span> schema <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normalizr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  statuses<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"TODO\"</span><span class=\"token punctuation\">,</span>\n      tasks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"normalizrの使い方を理解する\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Entity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tasks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Array</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Entity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"statuses\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> tasks <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> statuses <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Array</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">schema<span class=\"token punctuation\">.</span>Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> statuses <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   entities: {</span>\n<span class=\"token comment\">//     tasks: {</span>\n<span class=\"token comment\">//       \"1\": {</span>\n<span class=\"token comment\">//         id: 1,</span>\n<span class=\"token comment\">//         title: \"normalizrの使い方を理解する\"</span>\n<span class=\"token comment\">//       }</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     statuses: {</span>\n<span class=\"token comment\">//       \"1\": {</span>\n<span class=\"token comment\">//         id: 1,</span>\n<span class=\"token comment\">//         name: \"TODO\",</span>\n<span class=\"token comment\">//         tasks: [1]</span>\n<span class=\"token comment\">//       }</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//   },</span>\n<span class=\"token comment\">//   result: {</span>\n<span class=\"token comment\">//     statuses: [1]</span>\n<span class=\"token comment\">//   }</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<ul>\n<li>ネストしたオブジェクトをnormalizrで正規化すると、フラットな構造に変換される。</li>\n<li>task用のスキーマを用意し、status用のスキーマに渡すことで、ネストしたtaskの配列を正規化している。</li>\n</ul>","fileAbsolutePath":"/home/circleci/project/contents/posts/63.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"2ea939f4-58a2-53f2-919e-4ad889764268"}}}