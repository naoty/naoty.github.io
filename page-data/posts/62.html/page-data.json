{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/62.html","webpackCompilationHash":"8e794c7d7dccde6ae001","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"Echoで環境変数を使い回す","time":"2019-04-01T23:25:00+0900","description":null,"tags":["go"]},"html":"<h1>状況</h1>\n<p>Echoでデータベースに接続するときなどに環境変数を使ってデータベースのホスト名などの情報を取得したい。</p>\n<h1>問題</h1>\n<p>必要なときに都度<code class=\"language-text\">os.Getenv</code>で環境変数の値を取得すると、各ハンドラーで同じようなコードを何度も書くことになる。</p>\n<p>また、環境変数が設定されていないときのデフォルト値を設定したい場合や<code class=\"language-text\">string</code>以外の型に変換したい場合、さらにコード量が増えてしまう。</p>\n<h1>解決</h1>\n<p><a href=\"https://github.com/kelseyhightower/envconfig\">kelseyhightower/envconfig</a>を使って環境変数を簡単に扱えるようにし、すべてのハンドラーからカスタムコンテキストを通して環境変数にアクセスできるようにした。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// config.go</span>\n<span class=\"token keyword\">type</span> Config <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  DatabaseHost     <span class=\"token builtin\">string</span> <span class=\"token string\">`split_words:\"true\"`</span>\n  DatabaseName     <span class=\"token builtin\">string</span> <span class=\"token string\">`split_words:\"true\"`</span>\n  DatabasePassword <span class=\"token builtin\">string</span> <span class=\"token string\">`split_words:\"true\"`</span>\n  DatabasePort     <span class=\"token builtin\">int</span>    <span class=\"token string\">`split_words:\"true\"`</span>\n  DatabaseUser     <span class=\"token builtin\">string</span> <span class=\"token string\">`split_words:\"true\"`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// server.go</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> config Config\n  err <span class=\"token operator\">:=</span> envconfig<span class=\"token punctuation\">.</span><span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">DATABASE_HOST</code>のような環境変数に<code class=\"language-text\">Config</code>という構造体からアクセスできるようにしている。<code class=\"language-text\">config.DatabaseHost</code>のようにアクセスできるようになる。<code class=\"language-text\">string</code>型であれば<code class=\"language-text\">os.Getenv</code>でも問題ないけど、<code class=\"language-text\">int</code>型や<code class=\"language-text\">bool</code>型の場合は変換処理が面倒なのでenvconfigを使っている。</li>\n<li><code class=\"language-text\">split_words=&quot;true&quot;</code>というアノテーションをつけることで、スネークケースからキャメルケースに変換している。</li>\n<li><code class=\"language-text\">envconfig.Process</code>の第1引数は環境変数のプレフィックスになっている。<code class=\"language-text\">envconfig.Processs(&quot;database&quot;, &amp;config)</code>とすると、<code class=\"language-text\">config.Host</code>で環境変数<code class=\"language-text\">DATABASE_HOST</code>にアクセスできるようになる。必要なければ空文字でいい。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// custom_context.go</span>\n<span class=\"token keyword\">type</span> CustomContext <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  echo<span class=\"token punctuation\">.</span>Context\n  Config\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">CustomContextMiddleware</span><span class=\"token punctuation\">(</span>next echo<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> echo<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c echo<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    cc <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>CustomContext<span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">ConfigMiddleware</span><span class=\"token punctuation\">(</span>config Config<span class=\"token punctuation\">)</span> echo<span class=\"token punctuation\">.</span>MiddlewareFunc <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>next echo<span class=\"token punctuation\">.</span>HandlerFunc<span class=\"token punctuation\">)</span> echo<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c echo<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n      cc <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>CustomContext<span class=\"token punctuation\">)</span>\n      cc<span class=\"token punctuation\">.</span>Config <span class=\"token operator\">=</span> config\n      <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// server.go</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  e <span class=\"token operator\">:=</span> echo<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>CustomContextMiddleware<span class=\"token punctuation\">)</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span><span class=\"token function\">ConfigMiddleware</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>すべてのハンドラーから<code class=\"language-text\">Config</code>にアクセスできるようにカスタムコンテキストを用意し、そのフィールドに<code class=\"language-text\">Config</code>を追加する。</li>\n<li>カスタムコンテキストをデフォルトのコンテキストで拡張するため、middlewareを設定している。さらに、上で初期化した<code class=\"language-text\">Config</code>をカスタムコンテキストのフィールドに追加するためのmiddlewareも設定している。</li>\n</ul>\n<p>このように実装することで、以下のように簡単に環境変数にアクセスできるようになる。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// server.go</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tasks\"</span><span class=\"token punctuation\">,</span> getTasks<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">getTasks</span><span class=\"token punctuation\">(</span>c echo<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n  cc <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>CustomContext<span class=\"token punctuation\">)</span>\n  dsn <span class=\"token operator\">:=</span> cc<span class=\"token punctuation\">.</span><span class=\"token function\">GetDSN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// config.go</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Config<span class=\"token punctuation\">)</span> <span class=\"token function\">GetDSN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"%s:%s@tcp(%s:%i)/%s\"</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">.</span>DatabaseUser<span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">.</span>DatabasePassword<span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">.</span>DatabaseHost<span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">.</span>DatabasePort<span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">.</span>DatabaseName<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Config</code>は<code class=\"language-text\">CustomContext</code>の匿名フィールドなので、<code class=\"language-text\">CustomContext</code>から直接<code class=\"language-text\">Config</code>のメソッドである<code class=\"language-text\">GetDSN</code>を呼ぶことができる。</li>\n<li>上で説明したとおり、<code class=\"language-text\">c.DatabaseUser</code>などは環境変数<code class=\"language-text\">DATABASE_USER</code>などから値を取得している。</li>\n</ul>","fileAbsolutePath":"/home/circleci/project/contents/posts/62.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"810fd235-6be7-5915-90e0-430cb2da34f5"}}}