{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/74.html","webpackCompilationHash":"f42a676d4cb3af53d9de","result":{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"ビルドに必要なファイルの種類を整理する","time":"2019-08-04T16:38:00+0900","description":null,"tags":["c"]},"html":"<p>最近、mrubyを触ってるんだけど、ビルド周りの知識があいまいで自分が何をしているのかよくわからないときがあったので、<a href=\"https://www.oreilly.co.jp/books/9784873116099/\">Head First C</a>を読み直した。あらためて基本的なことを確認できたので、メモに残しておく。</p>\n<h1><code class=\"language-text\">*.c</code></h1>\n<ul>\n<li>C言語のソースコード</li>\n</ul>\n<h1><code class=\"language-text\">*.h</code></h1>\n<ul>\n<li>ヘッダーファイル。ソースコードで実装されている関数や構造体の宣言が書いてある。</li>\n<li>宣言をソースコードと分けることで、ソースコード内で関数や構造体を実装する順番を気にしなくてよくなる。</li>\n<li><code class=\"language-text\">#include &lt;stdio.h&gt;</code>や<code class=\"language-text\">#include &quot;myheader.h&quot;</code>でヘッダーファイル内の宣言をソースコードに展開する。前者は<code class=\"language-text\">/usr/include</code>や<code class=\"language-text\">/usr/local/include</code>以下にあるヘッダーファイルを検索し、後者はソースコードからの相対パスで検索する。</li>\n</ul>\n<h1><code class=\"language-text\">*.o</code></h1>\n<ul>\n<li>オブジェクトコード。CPUが実際に実行できるバイナリ形式のコード。</li>\n<li>\n<p>以下のように<code class=\"language-text\">gcc -c</code>でソースコードから生成できる。<code class=\"language-text\">-c</code>オプションはコンパイルするけどリンクしない。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># foo.oを生成する</span>\n$ gcc -c foo.c</code></pre></div>\n</li>\n</ul>\n<h1><code class=\"language-text\">lib*.a</code></h1>\n<ul>\n<li>スタティックリンクライブラリ。オブジェクトファイルを含んだzipファイルのようなアーカイブファイル。<code class=\"language-text\">/usr/lib</code>や<code class=\"language-text\">/usr/local/lib</code>のようなライブラリディレクトリに置かれている。</li>\n<li>\n<p><code class=\"language-text\">ar</code>コマンドを使ってスタティックリンクライブラリを生成できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># foo1.oとfoo2.oを含むlibfoo.aを生成する</span>\n$ ar -rcs libfoo.a foo1.o foo2.o</code></pre></div>\n</li>\n<li>\n<p>スタティックリンクライブラリを使ったコンパイルは以下のようになる。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># libfoo.aを使ってbazを生成する</span>\n$ gcc bar.c -lfoo -o baz</code></pre></div>\n</li>\n</ul>\n<h1><code class=\"language-text\">lib*.so</code></h1>\n<ul>\n<li>ダイナミックリンクライブラリ。複数のオブジェクトファイルを含むが、スタティックリンクライブラリとは異なり、オブジェクトファイルが適切にリンクされた1つのオブジェクトコードを持つ。<code class=\"language-text\">/usr/lib</code>や<code class=\"language-text\">/usr/local/lib</code>に置かれる。</li>\n<li>\n<p><code class=\"language-text\">gcc -shared</code>でオブジェクトファイルからダイナミックリンクライブラリを生成する</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># foo1.oを含むlibfoo.soを生成する</span>\n$ gcc -shared foo1.o -o libfoo.so</code></pre></div>\n</li>\n<li>\n<p>ダイナミックリンクライブラリを使ったコンパイルは以下のようにスタティックリンクライブラリのときと同じ。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gcc bar.c -lfoo -o baz</code></pre></div>\n<p>ただし、コンパイラはライブラリを実行可能ファイルに含めない。代わりに、実行時にライブラリを見つけ出してリンクするプレースホルダーを挿入する。</p>\n<p>このように生成された実行可能ファイルはダイナミックリンクライブラリを変更しても再コンパイルする必要はなく、ダイナミックリンクライブラリをコンパイルするだけでいい。</p>\n</li>\n</ul>\n<h1>実行可能ファイル</h1>\n<ul>\n<li>複数のオブジェクトファイルをリンクして実行可能な形式に変換される。</li>\n<li>\n<p>以下のように<code class=\"language-text\">gcc -o</code>でオブジェクトファイルから生成できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># すべてのオブジェクトファイルからfooを生成する</span>\n$ gcc *.o -o foo</code></pre></div>\n</li>\n</ul>\n<h1>まとめ</h1>\n<p>以上のような種類のファイルから最終的に実行可能ファイルができるまでの図を書いてみた。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">foo.c  -&gt; foo.o  ----------------+-&gt; qux\n                                 |\nbar1.c -&gt; bar1.o -+-&gt; libbar.a --+\n                  |              |\nbar2.c -&gt; bar2.o -+              |\n                                 |\nbaz1.c -&gt; baz1.o -+-&gt; libbaz.so -+\n                  |\nbaz2.c -&gt; baz2.o -+</code></pre></div>","fileAbsolutePath":"/home/circleci/project/contents/posts/74.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"04400fbb-68f7-5f4a-896b-7d3c86878ae8"}}}