{"version":3,"sources":["webpack:///path---posts-2-html-b8035f279c979a670825.js","webpack:///./.cache/json/posts-2-html.json"],"names":["webpackJsonp","390","module","exports","data","site","siteMetadata","rootURL","markdownRemark","frontmatter","title","time","description","html","fileAbsolutePath","pathContext","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,QAAA,4BAAqCC,gBAAmBC,aAAeC,MAAA,WAAAC,KAAA,2BAAAC,YAAA,MAAwEC,KAAA,o7BAA8eC,iBAAA,wBAA8fC,aAAgBC,GAAA","file":"path---posts-2-html-b8035f279c979a670825.js","sourcesContent":["webpackJsonp([180203803987912],{\n\n/***/ 390:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"モデルの差分更新\",\"time\":\"2017-12-01T21:40:00+0900\",\"description\":null},\"html\":\"<p>アプリからデータのバックアップを受け取るときに、サーバー側で差分更新を行う必要がある。全部消去してから全部挿入するという実装も考えられるが、何かの実装ミスの際に全消去してしまうリスクがありそうなので避けたい。</p>\\n<p>新しいデータと既存のデータを比較して、以下のような操作をする必要がある。</p>\\n<ul>\\n<li>新しいデータにも既存のデータにもあるデータを更新する。</li>\\n<li>新しいデータにあるが、既存のデータにないデータを挿入する。</li>\\n<li>新しいデータにないが、既存のデータにあるデータを削除する。</li>\\n</ul>\\n<p>これを実行するロジックをあらためて考えてみた。</p>\\n<pre><code class=\\\"language-rb\\\">new_users = [{ id: 1, name: \\\"...\\\" }, { id: 2, name: \\\"...\\\" }]\\nnew_users_index = new_users.index_by { |new_user| new_user[:id] }\\n\\nUser.all.in_batches do |users|\\n  users.each do |user|\\n    # インデックスから取得できたデータは取り除いていく\\n    # 残ったデータはINSERT時に利用する\\n    new_user = new_users_index.delete(user.id)\\n\\n    # 新しいデータに含まれているかチェック\\n    if new_user.nil?\\n      # 含まれていなければDELETE\\n      user.destroy\\n    else\\n      # 含まれていればUPDATE\\n      user.update_attributes(new_user)\\n    end\\n  end\\nend\\n\\n# 残ったデータはすべてINSERTする\\nnew_users_index.values.each do |new_user|\\n  User.create(new_user)\\nend\\n</code></pre>\",\"fileAbsolutePath\":\"contents/posts/2.md\"}},\"pathContext\":{\"id\":\"contents/posts/2.md absPath of file >>> MarkdownRemark\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-2-html-b8035f279c979a670825.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"rootURL\":\"https://naoty.github.io\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"モデルの差分更新\",\"time\":\"2017-12-01T21:40:00+0900\",\"description\":null},\"html\":\"<p>アプリからデータのバックアップを受け取るときに、サーバー側で差分更新を行う必要がある。全部消去してから全部挿入するという実装も考えられるが、何かの実装ミスの際に全消去してしまうリスクがありそうなので避けたい。</p>\\n<p>新しいデータと既存のデータを比較して、以下のような操作をする必要がある。</p>\\n<ul>\\n<li>新しいデータにも既存のデータにもあるデータを更新する。</li>\\n<li>新しいデータにあるが、既存のデータにないデータを挿入する。</li>\\n<li>新しいデータにないが、既存のデータにあるデータを削除する。</li>\\n</ul>\\n<p>これを実行するロジックをあらためて考えてみた。</p>\\n<pre><code class=\\\"language-rb\\\">new_users = [{ id: 1, name: \\\"...\\\" }, { id: 2, name: \\\"...\\\" }]\\nnew_users_index = new_users.index_by { |new_user| new_user[:id] }\\n\\nUser.all.in_batches do |users|\\n  users.each do |user|\\n    # インデックスから取得できたデータは取り除いていく\\n    # 残ったデータはINSERT時に利用する\\n    new_user = new_users_index.delete(user.id)\\n\\n    # 新しいデータに含まれているかチェック\\n    if new_user.nil?\\n      # 含まれていなければDELETE\\n      user.destroy\\n    else\\n      # 含まれていればUPDATE\\n      user.update_attributes(new_user)\\n    end\\n  end\\nend\\n\\n# 残ったデータはすべてINSERTする\\nnew_users_index.values.each do |new_user|\\n  User.create(new_user)\\nend\\n</code></pre>\",\"fileAbsolutePath\":\"contents/posts/2.md\"}},\"pathContext\":{\"id\":\"contents/posts/2.md absPath of file >>> MarkdownRemark\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-2-html.json\n// module id = 390\n// module chunks = 180203803987912"],"sourceRoot":""}