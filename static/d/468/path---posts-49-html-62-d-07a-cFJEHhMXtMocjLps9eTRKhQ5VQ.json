{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"Terraformの実行環境","time":"2018-12-02T11:41:00+0900","description":null,"tags":["terraform","docker"]},"html":"<p>Terraformを実行する方法としては、Homebrew等でインストールしてローカルで実行する方法と、<a href=\"https://hub.docker.com/r/hashicorp/terraform/\">hashicorp/terraform</a>のDockerイメージを使って実行する方法がある。</p>\n<h1>Dockerイメージ</h1>\n<p>Dockerイメージを使うことで実行するTerraformのバージョンをチームで統一することができる。また、CIでTerraformを簡単に実行できるようになるので、Dockerイメージを使うようにしている。</p>\n<p><a href=\"https://hub.docker.com/r/hashicorp/terraform/\">hashicorp/terraform</a>を使うときにはベースイメージとして使い、ソースコードを<code class=\"language-text\">ADD</code>したDockerイメージを作っている。<code class=\"language-text\">ENTRYPOINT</code>が<code class=\"language-text\">terraform</code>に設定されているため、以下のようにしてデフォルトでシェルにログインできるようにしている。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM hashicorp/terraform:0.11.10\nWORKDIR /terraform\nADD . /terraform/\nENTRYPOINT [&quot;&quot;]\nCMD [&quot;/bin/sh&quot;]</code></pre></div>\n<p><code class=\"language-text\">CMD</code>では<code class=\"language-text\">/bin/sh</code>の前に<code class=\"language-text\">terraform init</code>をしておくようなスクリプトを使うとより便利になると思う。</p>\n<h1>複数環境</h1>\n<p>本番環境やステージング環境といった環境ごとにtfstateを管理し環境間で共用するモジュールがある場合、以下のようなディレクトリ構成になると思う。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── modules\n│   └── some_module\n├── production\n│   ├── main.tf\n│   └── terraform.tfstate\n└── staging\n    ├── main.tf\n    └── terraform.tfstate</code></pre></div>\n<p>こういった場合、環境ごとにDockerfileを用意するようにしている。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM hashicorp/terraform:0.11.10\nWORKDIR /terraform/production\n\nADD ./production /terraform/production\nADD ./modules /terraform/modules\nRUN terraform get\n\nENTRYPOINT [&quot;&quot;]\nCMD [&quot;/bin/sh&quot;]</code></pre></div>\n<p>モジュールを利用するため<code class=\"language-text\">terraform get</code>でモジュールを初期化した状態でDockerイメージをビルドする。ビルドする際には以下のようにDockerfileの場所とコンテキストを分けて指定する。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker build -t my-terraform:production -f ./production/Dockerfile .</code></pre></div>\n<p>環境ごとにDockerfileを用意する場合、docker-composeを使うとより簡単に管理できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">version: &quot;3&quot;\nservices:\n  production:\n    build:\n      context: .\n      dockerfile: ./production/Dockerfile\n    image: my-terraform:production\n    volumes:\n      - ./production:/terraform/production\n      - ./modules:/terraform/modules\n  staging:\n    build:\n      context: .\n      dockerfile: ./staging/Dockerfile\n    image: my-terraform:staging\n    volumes:\n      - ./staging:/terraform/staging\n      - ./modules:/terraform/modules</code></pre></div>\n<p>これですべての環境のDockerイメージを簡単にビルドできる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose build</code></pre></div>\n<p>Terraformを実行するときは環境を指定してDockerイメージを起動すればいい。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose run --rm production</code></pre></div>","fileAbsolutePath":"/home/circleci/project/contents/posts/49.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"793704b1-9902-57ae-873d-6c67a469fc47"}}