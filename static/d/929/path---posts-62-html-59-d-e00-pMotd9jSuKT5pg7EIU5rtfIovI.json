{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"Echoで環境変数を使い回す","time":"2019-04-01T23:25:00+0900","description":null,"tags":["go"]},"html":"<h1>状況</h1>\n<p>Echoでデータベースに接続するときなどに環境変数を使ってデータベースのホスト名などの情報を取得したい。</p>\n<h1>問題</h1>\n<p>必要なときに都度<code>os.Getenv</code>で環境変数の値を取得すると、各ハンドラーで同じようなコードを何度も書くことになる。</p>\n<p>また、環境変数が設定されていないときのデフォルト値を設定したい場合や<code>string</code>以外の型に変換したい場合、さらにコード量が増えてしまう。</p>\n<h1>解決</h1>\n<p><a href=\"https://github.com/kelseyhightower/envconfig\">kelseyhightower/envconfig</a>を使って環境変数を簡単に扱えるようにし、すべてのハンドラーからカスタムコンテキストを通して環境変数にアクセスできるようにした。</p>\n<pre><code class=\"language-go\">// config.go\ntype Config struct {\n  DatabaseHost     string `split_words:\"true\"`\n  DatabaseName     string `split_words:\"true\"`\n  DatabasePassword string `split_words:\"true\"`\n  DatabasePort     int    `split_words:\"true\"`\n  DatabaseUser     string `split_words:\"true\"`\n}\n</code></pre>\n<pre><code class=\"language-go\">// server.go\nfunc main() {\n  var config Config\n  err := envconfig.Process(\"\", &#x26;config)\n  if err != nil {\n    log.Fatal(err.Error())\n  }\n\n  // ...\n}\n</code></pre>\n<ul>\n<li><code>DATABASE_HOST</code>のような環境変数に<code>Config</code>という構造体からアクセスできるようにしている。<code>config.DatabaseHost</code>のようにアクセスできるようになる。<code>string</code>型であれば<code>os.Getenv</code>でも問題ないけど、<code>int</code>型や<code>bool</code>型の場合は変換処理が面倒なのでenvconfigを使っている。</li>\n<li><code>split_words=\"true\"</code>というアノテーションをつけることで、スネークケースからキャメルケースに変換している。</li>\n<li><code>envconfig.Process</code>の第1引数は環境変数のプレフィックスになっている。<code>envconfig.Processs(\"database\", &#x26;config)</code>とすると、<code>config.Host</code>で環境変数<code>DATABASE_HOST</code>にアクセスできるようになる。必要なければ空文字でいい。</li>\n</ul>\n<pre><code class=\"language-go\">// custom_context.go\ntype CustomContext struct {\n  echo.Context\n  Config\n}\n\nfunc CustomContextMiddleware(next echo.HandlerFunc) echo.HandlerFunc {\n  return func(c echo.Context) error {\n    cc := &#x26;CustomContext{c}\n    return next(cc)\n  }\n}\n\nfunc ConfigMiddleware(config Config) echo.MiddlewareFunc {\n  return func(next echo.HandlerFunc) echo.HandlerFunc {\n    return func(c echo.Context) error {\n      cc := c.(*CustomContext)\n      cc.Config = config\n      return next(cc)\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-go\">// server.go\nfunc main() {\n  // ...\n\n  e := echo.New()\n  e.Use(CustomContextMiddleware)\n  e.Use(ConfigMiddleware(config))\n\n  // ...\n}\n</code></pre>\n<ul>\n<li>すべてのハンドラーから<code>Config</code>にアクセスできるようにカスタムコンテキストを用意し、そのフィールドに<code>Config</code>を追加する。</li>\n<li>カスタムコンテキストをデフォルトのコンテキストで拡張するため、middlewareを設定している。さらに、上で初期化した<code>Config</code>をカスタムコンテキストのフィールドに追加するためのmiddlewareも設定している。</li>\n</ul>\n<p>このように実装することで、以下のように簡単に環境変数にアクセスできるようになる。</p>\n<pre><code class=\"language-go\">// server.go\nfunc main() {\n  // ...\n\n  e.GET(\"/tasks\", getTasks)\n\n  // ...\n}\n\nfunc getTasks(c echo.Context) error {\n  cc := c.(*CustomContext)\n  dsn := cc.GetDSN()\n\n  // ...\n}\n</code></pre>\n<pre><code class=\"language-go\">// config.go\nfunc (c Config) GetDSN() string {\n  return fmt.Sprintf(\n    \"%s:%s@tcp(%s:%i)/%s\",\n    c.DatabaseUser,\n    c.DatabasePassword,\n    c.DatabaseHost,\n    c.DatabasePort,\n    c.DatabaseName,\n  )\n}\n</code></pre>\n<ul>\n<li><code>Config</code>は<code>CustomContext</code>の匿名フィールドなので、<code>CustomContext</code>から直接<code>Config</code>のメソッドである<code>GetDSN</code>を呼ぶことができる。</li>\n<li>上で説明したとおり、<code>c.DatabaseUser</code>などは環境変数<code>DATABASE_USER</code>などから値を取得している。</li>\n</ul>","fileAbsolutePath":"/home/circleci/project/contents/posts/62.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"810fd235-6be7-5915-90e0-430cb2da34f5"}}