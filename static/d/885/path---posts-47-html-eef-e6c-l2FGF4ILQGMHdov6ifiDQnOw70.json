{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"db:migrateした分だけdb:rollbackするrubygemを書いた","time":"2018-11-11T15:27:00+0900","description":null,"tags":["rails"]},"html":"<p><a href=\"https://github.com/naoty/batch_rollback\">naoty/batch_rollback</a>というrubygemを書いた。</p>\n<p><img src=\"/images/posts/47/screencast.gif\" alt=\"screencast\"></p>\n<p>これは<code class=\"language-text\">db:migrate</code>でmigrateしたversionやステップ数を記録しておいて、<code class=\"language-text\">db:rollback</code>でまとめてrollbackできるようにする。</p>\n<h1>モチベーション</h1>\n<p>このrubygemを書いた動機としては、ロールバックを安全に自動化したかった。Railsアプリケーションをロールバックするには<code class=\"language-text\">rails db:rollback</code>を行うことになるが、そのとき問題になるのは<code class=\"language-text\">STEP</code>をいくつにするかということがある。リリース時に<code class=\"language-text\">db:migrate</code>したmigrationファイルがいくつあったかはリリースごとに異なるため、ロールバックを自動化する上で問題になる。</p>\n<p>そこで、<code class=\"language-text\">db:migrate</code>時にmigrateされたバージョン数を記録しておき、<code class=\"language-text\">db:rollback</code>の<code class=\"language-text\">STEP</code>に指定するrubygemを書いた。</p>\n<h1>仕組み</h1>\n<p><code class=\"language-text\">db:migrate</code>の前後にRakeタスクを追加し、migrationされたバージョンやステップを記録している。あるRakeタスクの前後に実行させたいRakeタスクを追加するには<code class=\"language-text\">Rake::Task#enhance</code>を使う。<code class=\"language-text\">Railtie</code>で<code class=\"language-text\">#enhance</code>したい場合は<code class=\"language-text\">Railtie.rake_tasks</code>ブロック内で行う。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module BatchRollback\n  class Railtie &lt; Rails::Railtie\n    rake_tasks do\n      namespace :batch_rollback do\n        task :pre_migration do\n        end\n\n        task :post_migration do\n        end\n      end\n\n      Rake::Task[&quot;db:migrate&quot;].enhance([&quot;batch_rollback:pre_migration&quot;]) do\n        Rake::Task[&quot;batch_rollback:post_migration&quot;].invoke\n      end\n    end\n  end\nend</code></pre></div>\n<p>migrationされたバージョンやステップの記録はrubygem内に定義したちょっとしたmodelから行っている。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module BatchRollback\n  class MigrationStep &lt; ActiveRecord::Base\n  end\nend</code></pre></div>\n<p>こうしたmodelのためのテーブルを作成するには、migrationを使うわけにはいかないので、<code class=\"language-text\">ActiveRecord::ConnectionAdapters::SchemaStatements#create_table</code>を利用する。このメソッドを使うとmigrationで使うDSLを使って簡単にテーブルを作成できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module BatchRollback\n  class MigrationStep &lt; ActiveRecord::Base\n    class &lt;&lt; self\n      def create_table\n        connection.create_table(table_name) do |t|\n          t.string :current_version\n          t.string :target_version\n          t.integer :step\n        end\n      end\n    end\n  end\nend</code></pre></div>\n<p>こういったテクニックを組み合わせることで今回のrubygemを実装することができた。</p>","fileAbsolutePath":"/home/circleci/project/contents/posts/47.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"7834f3d9-bd6b-504f-922f-34a9c5554d2d"}}