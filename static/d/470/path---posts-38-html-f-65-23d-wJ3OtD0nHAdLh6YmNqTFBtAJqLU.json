{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"multi-stage buildでのfreshの運用","time":"2018-08-05T18:55:00+0900","description":null,"tags":["go","docker"]},"html":"<p>Goで書いているWebアプリケーションをDockerイメージにするとき、multi-stage buildを使ってビルド用のイメージと実行用のイメージを分けると思う。実行用のイメージをalpine linuxベースにするとイメージのサイズが異常に小さくなる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM golang as builder\nENV CGO_ENABLED 0\nWORKDIR /go/src/github.com/naoty/hello\n\nRUN curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh \\\n  &amp;&amp; go get github.com/pilu/fresh\n\n# dep\nCOPY Gopkg.toml Gopkg.lock /go/src/github.com/naoty/hello/\nRUN dep ensure -v --vendor-only=true\n\nCOPY . /go/src/github.com/naoty/hello/\nRUN make install\n\nFROM alpine\nRUN apk --no-cache add ca-certificates \nWORKDIR /root/\nCOPY --from=builder /go/bin/hello /root/\nCMD [&quot;./hello&quot;]</code></pre></div>\n<p>一方で、Goの開発では<a href=\"https://github.com/pilu/fresh\">pilu/fresh</a>を使ってファイルの更新時に自動的にビルドと実行をし直したい。だけど、multi-stage buildを使っていると、実行用のイメージにはGoのビルド環境がないため、少し工夫が必要になる。</p>\n<p>docker-composeを使うとき、<code class=\"language-text\">target</code>オプションを使うとビルド用のコンテナまででビルドを中断できる。ただし、3.4からの機能なので<code class=\"language-text\">version</code>を3.4以上にする必要がある。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">version: &quot;3.4&quot;\nservices:\n  app:\n    build:\n      context: .\n      target: builder\n    command: [&quot;fresh&quot;]</code></pre></div>","fileAbsolutePath":"/home/circleci/project/contents/posts/38.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"1c26261b-768b-54ed-8802-fb05f7e602bb"}}