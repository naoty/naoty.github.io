{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"terraformとapex infraの依存関係","time":"2019-02-28T23:52:00+0900","description":null,"tags":["terraform"]},"html":"<h1>背景</h1>\n<p>AWSの構成管理にterraformを使っているんだけど、Lambda関数とそれに関連するAWSリソースの管理は<a href=\"https://apex.run\">apex</a>を使っている。apexの方がLambda関数のバージョニングができたり、コードの依存関係を簡単にzipにまとめてアップロードできたりして便利なのだ。</p>\n<p>apexには、<code>apex infra</code>というコマンドがあり、Lambda関数にAWS関連するリソース（パーミッションとかCloudWatch Logsとか）を管理できる。実際には内部的にterraformを使っている。</p>\n<h1>課題</h1>\n<p>terraformで管理するリソースと<code>apex infra</code>で管理するリソースに明確なボーダーラインを引くことは難しい。apexで管理するLambda関数はterraformで管理するさまざまなリソースと依存関係になっていることがほとんどだからだ。どこで何が管理されているのかわからなってくる。</p>\n<h1>方針</h1>\n<p>こういうときの考え方として、依存関係の方向性を単方向にすると良かったりする。<code>apex infra</code>で管理するリソースはterraformで管理するリソースを参照することができるけど、逆にterraformで管理するリソースは<code>apex infra</code>で管理するリソースを参照できない、というルールを作る。</p>\n<h1>実装</h1>\n<p><code>apex infra</code>からterraformのリソースを参照するために<code>terraform_remote_state</code>を使う。ここでは例として、apexで管理するLambda関数をterraformで管理するSNSトピックにsubscribeしたいとする。</p>\n<pre><code>data \"terraform_remote_state\" \"global\" {\n  backend = \"s3\"\n\n  config {\n    region = \"ap-northeast-1\"\n    bucket = \"my-terraform\"\n    key    = \"global\"\n  }\n}\n</code></pre>\n<pre><code>resource \"aws_sns_topic_subscription\" \"lambda\" {\n  topic_arn = \"${data.terraform_remote_state.global.my_topic}\"\n  protocol  = \"lambda\"\n  endpoint  = \"${var.apex_function_arns[\"my_function\"]}\"\n}\n</code></pre>\n<p>SNSトピックのARNは事前に<code>output</code>でremote stateとして公開しておく必要がある。</p>\n<p>こうすることで、terraform側からapexで管理するLambda関数を参照せずに済んでいる。Lambda関数を参照するリソースは<code>apex infra</code>で管理し、そうでないリソースはterraformで管理するという方針でうまく整理できそうだ。</p>","fileAbsolutePath":"/home/circleci/project/contents/posts/59.md"}},"pageContext":{"id":"de546ed8-420e-5791-a031-bd35e557f2b7"}}