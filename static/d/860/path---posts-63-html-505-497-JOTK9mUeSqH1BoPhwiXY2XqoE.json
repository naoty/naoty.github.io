{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"normalizrの使い方","time":"2019-04-12T20:23:00+0900","description":null,"tags":["javascript"]},"html":"<p>最近、Nuxt.jsでカンバンアプリを作る練習をしていて、そこで<a href=\"https://github.com/paularmstrong/normalizr\">normalizr</a>を使っている。GraphQLのレスポンスをnormalizrで正規化してVuexのStoreに保存している。normalizrを使って正規化されたデータは、特にネストしたデータをループしたい場合、Vueコンポーネント内で扱いやすいので、重宝している。</p>\n<p>normalizrの使い方を理解するのに少し手間取ったので、自分のためにメモしておきたい。</p>\n<h1>オブジェクト</h1>\n<pre><code class=\"language-js\">const { normalize, schema } = require(\"normalizr\");\nconst data = {\n  id: 1,\n  name: \"TODO\"\n};\nconst status = new schema.Entity(\"statuses\");\nnormalize(data, status);\n// {\n//   entities: {\n//     statuses: {\n//       \"1\": {\n//         id: 1,\n//         name: \"TODO\"\n//       }\n//     }\n//   },\n//   result: 1\n// }\n</code></pre>\n<ul>\n<li><code>normalize(&#x3C;正規化したいデータ>, &#x3C;スキーマ>)</code>という使い方をする。</li>\n<li><code>new schema.Entity(&#x3C;キー>)</code>でスキーマを初期化する。キーは正規化したデータのプロパティ名に使われる。</li>\n<li>正規化されたデータは<code>id</code>の値をキーとしたオブジェクトになっている。デフォルトでは<code>id</code>プロパティをキーに使うけど、<code>idAttribute</code>オプションで<code>id</code>以外のプロパティをキーに使うことができる。</li>\n</ul>\n<h1>配列</h1>\n<pre><code class=\"language-js\">const { normalize, schema } = require(\"normalizr\");\nconst data = [\n  {\n    id: 1,\n    name: \"TODO\"\n  }\n];\nconst status = new schema.Entity(\"statuses\");\nconst statuses = new schema.Array(status);\nnormalize(data, statuses);\n// {\n//   entities: {\n//     statuses: {\n//       \"1\": {\n//         id: 1,\n//         name: \"TODO\"\n//       }\n//     }\n//   },\n//   result: 1\n// }\n</code></pre>\n<ul>\n<li>正規化したいデータが配列の場合、<code>schema.Array</code>を<code>normalize</code>に渡す。</li>\n</ul>\n<h1>名前つきの配列</h1>\n<pre><code class=\"language-js\">const { normalize, schema } = require(\"normalizr\");\nconst data = {\n  statuses: [\n    {\n      id: 1,\n      name: \"TODO\"\n    }\n  ]\n};\nconst status = new schema.Entity(\"statuses\");\nconst statuses = new schema.Array(status);\nconst root = new schema.Object({ statuses });\nnormalize(data, root);\n// {\n//   entities: {\n//     statuses: {\n//       \"1\": {\n//         id: 1,\n//         name: \"TODO\"\n//       }\n//     }\n//   },\n//   result: {\n//     statuses: [1]\n//   }\n// }\n</code></pre>\n<ul>\n<li><code>statuses: [...]</code>のような名前がついた配列の場合、<code>schema.Object</code>を使ってどのプロパティに対してどのスキーマを使うかをマッピングすることで正規化できるようになる。</li>\n</ul>\n<h1>ネストしたオブジェクト</h1>\n<pre><code class=\"language-js\">const { normalize, schema } = require(\"normalizr\");\nconst data = {\n  statuses: [\n    {\n      id: 1,\n      name: \"TODO\",\n      tasks: [\n        {\n          id: 1,\n          title: \"normalizrの使い方を理解する\"\n        }\n      ]\n    }\n  ]\n};\nconst task = new schema.Entity(\"tasks\");\nconst tasks = new schema.Array(task);\nconst status = new schema.Entity(\"statuses\", { tasks });\nconst statuses = new schema.Array(status);\nconst root = new schema.Object({ statuses });\nnormalize(data, root);\n// {\n//   entities: {\n//     tasks: {\n//       \"1\": {\n//         id: 1,\n//         title: \"normalizrの使い方を理解する\"\n//       }\n//     }\n//     statuses: {\n//       \"1\": {\n//         id: 1,\n//         name: \"TODO\",\n//         tasks: [1]\n//       }\n//     }\n//   },\n//   result: {\n//     statuses: [1]\n//   }\n// }\n</code></pre>\n<ul>\n<li>ネストしたオブジェクトをnormalizrで正規化すると、フラットな構造に変換される。</li>\n<li>task用のスキーマを用意し、status用のスキーマに渡すことで、ネストしたtaskの配列を正規化している。</li>\n</ul>","fileAbsolutePath":"/home/circleci/project/contents/posts/63.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"2ea939f4-58a2-53f2-919e-4ad889764268"}}