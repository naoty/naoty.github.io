{"data":{"site":{"siteMetadata":{"rootURL":"https://naoty.github.io"}},"markdownRemark":{"frontmatter":{"title":"Container Componentの作り方","time":"2018-09-05T16:39:00+0900","description":"Container Componentの実装の個人的なメモ","tags":["react"]},"html":"<p>Reactに慣れてきたので、ComponentをContainer ComponentとPresentational Componentに分けるという実装パターンを試している。</p>\n<p>Presentational ComponentはFunctional Componentで簡単に書けるけど、Container Componentの書き方がいまいち分かってなかったのでメモする。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &quot;react&quot;;\n\nexport default class Container extends React.Component {\n  render() {\n    // 子コンポーネントに渡すprops\n    const props = {};\n\n    // this.props.childrenは複数の可能性もあるので\n    // React.cloneElement(this.props.children)はエラーになる。\n    return React.Children.map(this.props.children, child =&gt; (\n      // childはテキストの可能性もあるためtype checkする\n      if (typeof child === &quot;object&quot;) {\n        return React.cloneElement(child, props);\n      }\n\n      return child;\n    ));\n  }\n}</code></pre></div>\n<p>このContainerでstateを管理し、子コンポーネントにprops経由で渡すようなイメージ。あとは、副作用を伴うアクションをContainerで定義しておいて、props経由で渡すこともありそう。</p>\n<hr>\n<h2>追記: 2018-09-06 12:30:00</h2>\n<p>上のような汎用的なContainer Componentを作るならHOCを使う方がいいかもしれない。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &quot;react&quot;;\n\nexport default (Component) =&gt; {\n  // 引数のComponentをラップするComponentを返す\n  return class extends React.Component {\n    render() {\n      // 自身に渡されたpropsとstateをラップしたComponentに渡す\n      return &lt;Component {...this.state} {...this.props} /&gt;;\n    }\n  }\n}</code></pre></div>\n<p>こっちの方がシンプルに書けそう。</p>","fileAbsolutePath":"/home/circleci/project/contents/posts/40.md"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"2a05b690-06de-51fb-b14f-05790e6d0d88"}}